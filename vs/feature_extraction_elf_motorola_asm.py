# feature_extraction_elf_motorola_asm.py
#
# Read a list of ELF Motorola ASM files generated by objdump and extract
# feature sets from them.
#
# ELF executable platforms include: x86, amd64, ARM, SPARC, MIPS, Motorola, PowerPC, Renesas (SuperH).
#
# Input: A list of ELF Motorola ASM files.
#
# Output: sorted-elf-motorola-features-asm.csv
#         row format = [file_name, [list of register counts], [list of opcode counts], [list of api functions]]
#
# Author: Derek Chadwick
# Date  : 24/09/2016
#
# TODO: all of the things

from multiprocessing import Pool
import os
from csv import writer
import numpy as np
import pandas as pd
import math
import scipy.misc
import array
import time as tm
import re
import subprocess as sub


Motorola_registers = ['d0','d1','d2','d3','d4','d5','d6','d7','a0','a1','a2','a3','a4','a5','a6','a7','usp','ssp']

Motorola_opcodes = ['abcd','addaw','addal','addib','addiw','addil','addqb','addqw','addql','addb',
                    'addw','addl','addxb','addxw','addxl','andib','andiw','andil','andi','andb','andw',
                    'andl','and','aslb','aslw','asll','asrb','asrw','asrl','bhiw','blsw','bccw','bcsw',
                    'bnew','beqw','bvcw','bvsw','bplw','bmiw','bgew','bltw','bgtw','blew','bhil','blsl',
                    'bccl','bcsl','bnel','beql','bvcl','bvsl','bpll','bmil','bgel','bltl','bgtl','blel',
                    'bhis','blss','bccs','bcss','bnes','beqs','bvcs','bvss','bpls','bmis','bges','blts',
                    'bgts','bles','jhi','jls','jcc','jcs','jne','jeq','jvc','jvs','jpl','jmi','jge','jlt',
                    'jgt','jle','bchg','bclr','bfchg','bfclr','bfexts','bfextu','bfffo','bfins','bfset',
                    'bftst','bgnd','bitrev','bkpt','braw','bral','bras','bset','bsrw','bsrl','bsrs','btst',
                    'byterev','callm','cas2w','cas2l','casb','casw','casl','chk2b','chk2w','chk2l','chkl',
                    'chkw','cinva','cinvl','cinvp','cpusha','cpushl','cpushp','clrb','clrw','clrl','cmp2b',
                    'cmp2w','cmp2l','cmpaw','cmpal','cmpib','cmpiw','cmpil','cmpmb','cmpmw','cmpml','cmpb',
                    'cmpw','cmpl','cp0bcbusy','cp1bcbusy','cp0nop','cp1nop','cp0ldb','cp1ldb','cp0ldw',
                    'cp1ldw','cp0ldl','cp1ldl','cp0ld','cp1ld','cp0stb','cp1stb','cp0stw','cp1stw','cp0stl',
                    'cp1stl','cp0st','cp1st','dbcc','dbcs','dbeq','dbf','dbge','dbgt','dbhi','dble',
                    'dbls','dblt','dbmi','dbne','dbpl','dbt','dbvc','dbvs','divsw','divsl','divsll',
                    'divuw','divul','divull','eorib','eoriw','eoril','eori','eorb','eorw','eorl','eor',
                    'exg','extw','extl','extbl','ff1','fabsb','fabsd','fabsl','fabsp','fabss','fabsw',
                    'fabsx','fsabsb','fsabsd','fsabsl','fsabsp','fsabss','fsabsw','fsabsx','fdabsb',
                    'fdabsd','fdabsl','fdabsp','fdabss','fdabsw','fdabsx','facosb','facosd','facosl',
                    'facosp','facoss','facosw','facosx','faddb','faddd','faddl','faddp','fadds','faddw',
                    'faddx','fsaddb','fsaddd','fsaddl','fsaddp','fsadds','fsaddw','fsaddx','fdaddb',
                    'fdaddd','fdaddl','fdaddp','fdadds','fdaddw','fdaddx','fasinb','fasind','fasinl',
                    'fasinp','fasins','fasinw','fasinx','fatanb','fatand','fatanl','fatanp','fatans',
                    'fatanw','fatanx','fatanhb','fatanhd','fatanhl','fatanhp','fatanhs','fatanhw',
                    'fatanhx','fnop','fbeq','fbf','fbge','fbgl','fbgle','fbgt','fble','fblt','fbne',
                    'fbnge','fbngl','fbngle','fbngt','fbnle','fbnlt','fboge','fbogl','fbogt','fbole',
                    'fbolt','fbor','fbseq','fbsf','fbsne','fbst','fbt','fbueq','fbuge','fbugt',
                    'fbule','fbult','fbun','fbeql','fbfl','fbgel','fbgll','fbglel','fbgtl','fblel',
                    'fbltl','fbnel','fbngel','fbngll','fbnglel','fbngtl','fbnlel','fbnltl','fbogel',
                    'fbogll','fbogtl','fbolel','fboltl','fborl','fbseql','fbsfl','fbsnel','fbstl',
                    'fbtl','fbueql','fbugel','fbugtl','fbulel','fbultl','fbunl','fjeq','fjf','fjge',
                    'fjgl','fjgle','fjgt','fjle','fjlt','fjne','fjnge','fjngl','fjngle','fjngt',
                    'fjnle','fjnlt','fjoge','fjogl','fjogt','fjole','fjolt','fjor','fjseq','fjsf',
                    'fjsne','fjst','fjt','fjueq','fjuge','fjugt','fjule','fjult','fjun','fcmpb',
                    'fcmpd','fcmpl','fcmpp','fcmps','fcmpw','fcmpx','fcosb','fcosd','fcosl',
                    'fcosp','fcoss','fcosw','fcosx','fcoshb','fcoshd','fcoshl','fcoshp','fcoshs',
                    'fcoshw','fcoshx','fdbeq','fdbf','fdbge','fdbgl','fdbgle','fdbgt','fdble',
                    'fdblt','fdbne','fdbnge','fdbngl','fdbngle','fdbngt','fdbnle','fdbnlt',
                    'fdboge','fdbogl','fdbogt','fdbole','fdbolt','fdbor','fdbseq','fdbsf','fdbsne',
                    'fdbst','fdbt','fdbueq','fdbuge','fdbugt','fdbule','fdbult','fdbun','fdivb',
                    'fdivd','fdivl','fdivp','fdivs','fdivw','fdivx','fsdivb','fsdivd','fsdivl',
                    'fsdivp','fsdivs','fsdivw','fsdivx','fddivb','fddivd','fddivl','fddivp','fddivs',
                    'fddivw','fddivx','fetoxb','fetoxd','fetoxl','fetoxp','fetoxs','fetoxw',
                    'fetoxx','fetoxm1b','fetoxm1d','fetoxm1l','fetoxm1p','fetoxm1s','fetoxm1w',
                    'fetoxm1x','fgetexpb','fgetexpd','fgetexpl','fgetexpp','fgetexps','fgetexpw',
                    'fgetexpx','fgetmanb','fgetmand','fgetmanl','fgetmanp','fgetmans','fgetmanw',
                    'fgetmanx','fintb','fintd','fintl','fintp','fints','fintw','fintx','fintrzb',
                    'fintrzd','fintrzl','fintrzp','fintrzs','fintrzw','fintrzx','flog10b','flog10d',
                    'flog10l','flog10p','flog10s','flog10w','flog10x','flog2b','flog2d','flog2l',
                    'flog2p','flog2s','flog2w','flog2x','flognb','flognd','flognl','flognp','flogns',
                    'flognw','flognx','flognp1b','flognp1d','flognp1l','flognp1p','flognp1s','flognp1w',
                    'flognp1x','fmodb','fmodd','fmodl','fmodp','fmods','fmodw','fmodx','fmoveb','fmoved',
                    'fmovel','fmovep','fmoves','fmovew','fmovex','fsmoveb','fsmoved','fsmovel','fsmoves',
                    'fsmovew','fsmovex','fsmovep','fdmoveb','fdmoved','fdmovel','fdmoves','fdmovew',
                    'fdmovex','fdmovep','fmovecrx','fmovemd','fmovemx','fmoveml','fmovem','fmulb','fmuld',
                    'fmull','fmulp','fmuls','fmulw','fmulx','fsmulb','fsmuld','fsmull','fsmulp','fsmuls',
                    'fsmulw','fsmulx','fdmulb','fdmuld','fdmull','fdmulp','fdmuls','fdmulw','fdmulx',
                    'fnegb','fnegd','fnegl','fnegp','fnegs','fnegw','fnegx','fsnegb','fsnegd','fsnegl',
                    'fsnegp','fsnegs','fsnegw','fsnegx','fdnegb','fdnegd','fdnegl','fdnegp','fdnegs',
                    'fdnegw','fdnegx','fremb','fremd','freml','fremp','frems','fremw','fremx',
                    'frestore','fsave','fscaleb','fscaled','fscalel','fscalep','fscales','fscalew',
                    'fscalex','fseq','fsf','fsge','fsgl','fsgle','fsgt','fsle','fslt','fsne',
                    'fsnge','fsngl','fsngle','fsngt','fsnle','fsnlt','fsoge','fsogl','fsogt','fsole',
                    'fsolt','fsor','fsseq','fssf','fssne','fsst','fst','fsueq','fsuge','fsugt',
                    'fsule','fsult','fsun','fsgldivb','fsgldivd','fsgldivl','fsgldivp','fsgldivs',
                    'fsgldivw','fsgldivx','fsglmulb','fsglmuld','fsglmull','fsglmulp','fsglmuls',
                    'fsglmulw','fsglmulx','fsinb','fsind','fsinl','fsinp','fsins','fsinw','fsinx',
                    'fsincosb','fsincosd','fsincosl','fsincosp','fsincoss','fsincosw','fsincosx',
                    'fsinhb','fsinhd','fsinhl','fsinhp','fsinhs','fsinhw','fsinhx','fsqrtb',
                    'fsqrtd','fsqrtl','fsqrtp','fsqrts','fsqrtw','fsqrtx','fssqrtb','fssqrtd',
                    'fssqrtl','fssqrtp','fssqrts','fssqrtw','fssqrtx','fdsqrtb','fdsqrtd',
                    'fdsqrtl','fdsqrtp','fdsqrts','fdsqrtw','fdsqrtx','fsubb','fsubd','fsubl',
                    'fsubp','fsubs','fsubw','fsubx','fssubb','fssubd','fssubl','fssubp','fssubs',
                    'fssubw','fssubx','fdsubb','fdsubd','fdsubl','fdsubp','fdsubs','fdsubw',
                    'fdsubx','ftanb','ftand','ftanl','ftanp','ftans','ftanw','ftanx','ftanhb',
                    'ftanhd','ftanhl','ftanhp','ftanhs','ftanhw','ftanhx','ftentoxb','ftentoxd',
                    'ftentoxl','ftentoxp','ftentoxs','ftentoxw','ftentoxx','ftrapeq','ftrapf',
                    'ftrapge','ftrapgl','ftrapgle','ftrapgt','ftraple','ftraplt','ftrapne','ftrapnge',
                    'ftrapngl','ftrapngle','ftrapngt','ftrapnle','ftrapnlt','ftrapoge','ftrapogl',
                    'ftrapogt','ftrapole','ftrapolt','ftrapor','ftrapseq','ftrapsf','ftrapsne',
                    'ftrapst','ftrapt','ftrapueq','ftrapuge','ftrapugt','ftrapule','ftrapult',
                    'ftrapun','ftrapeqw','ftrapfw','ftrapgew','ftrapglw','ftrapglew','ftrapgtw',
                    'ftraplew','ftrapltw','ftrapnew','ftrapngew','ftrapnglw','ftrapnglew',
                    'ftrapngtw','ftrapnlew','ftrapnltw','ftrapogew','ftrapoglw','ftrapogtw',
                    'ftrapolew','ftrapoltw','ftraporw','ftrapseqw','ftrapsfw','ftrapsnew',
                    'ftrapstw','ftraptw','ftrapueqw','ftrapugew','ftrapugtw','ftrapulew',
                    'ftrapultw','ftrapunw','ftrapeql','ftrapfl','ftrapgel','ftrapgll','ftrapglel',
                    'ftrapgtl','ftraplel','ftrapltl','ftrapnel','ftrapngel','ftrapngll','ftrapnglel',
                    'ftrapngtl','ftrapnlel','ftrapnltl','ftrapogel','ftrapogll','ftrapogtl',
                    'ftrapolel','ftrapoltl','ftraporl','ftrapseql','ftrapsfl','ftrapsnel',
                    'ftrapstl','ftraptl','ftrapueql','ftrapugel','ftrapugtl','ftrapulel','ftrapultl',
                    'ftrapunl','ftstb','ftstd','ftstl','ftstp','ftsts','ftstw','ftstx','ftwotoxb',
                    'ftwotoxd','ftwotoxl','ftwotoxp','ftwotoxs','ftwotoxw','ftwotoxx',
                    'halt','illegal','intouch','jmp','jra','jsr','jbsr','lea','lpstop','linkw',
                    'linkl','link','lslb','lslw','lsll','lsrb','lsrw','lsrl','macw','macl','moveal',
                    'moveaw','movclrl','movec','movemw','moveml','movepw','movepl','moveq','moveb',
                    'movew','movel','move','mov3ql','mvsb','mvsw','mvzb','mvzw','movesb','movesw',
                    'movesl','move16','msacw','msacl','mulsw','mulsl','muluw','mulul','nbcd','negb',
                    'negw','negl','negxb','negxw','negxl','nop','notb','notw','notl','orib','oriw',
                    'oril','ori','orb','orw','orl','or','pack','pbac','pbacw','pbas','pbasw','pbbc',
                    'pbbcw','pbbs','pbbsw','pbcc','pbccw','pbcs','pbcsw','pbgc','pbgcw','pbgs','pbgsw',
                    'pbic','pbicw','pbis','pbisw','pblc','pblcw','pbls','pblsw','pbsc','pbscw','pbss',
                    'pbssw','pbwc','pbwcw','pbws','pbwsw','pdbac','pdbas','pdbbc','pdbbs','pdbcc',
                    'pdbcs','pdbgc','pdbgs','pdbic','pdbis','pdblc','pdbls','pdbsc','pdbss','pdbwc',
                    'pdbws','pea','pflusha','pflush','pflushan','pflushn','pflushr','pflushs','ploadr',
                    'ploadw','plpar','plpaw','pmove','pmovefd','prestore','psave','psac','psas','psbc',
                    'psbs','pscc','pscs','psgc','psgs','psic','psis','pslc','psls','pssc','psss','pswc',
                    'psws','ptestr','ptestw','ptrapacw','ptrapacl','ptrapac','ptrapasw','ptrapasl',
                    'ptrapas','ptrapbcw','ptrapbcl','ptrapbc','ptrapbsw','ptrapbsl','ptrapbs','ptrapccw',
                    'ptrapccl','ptrapcc','ptrapcsw','ptrapcsl','ptrapcs','ptrapgcw','ptrapgcl',
                    'ptrapgc','ptrapgsw','ptrapgsl','ptrapgs','ptrapicw','ptrapicl','ptrapic',
                    'ptrapisw','ptrapisl','ptrapis','ptraplcw','ptraplcl','ptraplc','ptraplsw',
                    'ptraplsl','ptrapls','ptrapscw','ptrapscl','ptrapsc','ptrapssw','ptrapssl',
                    'ptrapss','ptrapwcw','ptrapwcl','ptrapwc','ptrapwsw','ptrapwsl','ptrapws',
                    'pulse','pvalid','remsl','remul','reset','rolb','rolw','roll','rorb','rorw',
                    'rorl','roxlb','roxlw','roxll','roxrb','roxrw','roxrl','rtd','rte','rtm','rtr',
                    'rts','satsl','sbcd','stldsr','trapcc','trapcs','trapeq','tpf','trapf','trapge',
                    'trapgt','traphi','traple','trapls','traplt','trapmi','trapne','trappl','trapt',
                    'trapvc','trapvs','trapccw','trapcsw','trapeqw','tpfw','trapfw','trapgew','trapgtw',
                    'traphiw','traplew','traplsw','trapltw','trapmiw','trapnew','trapplw','traptw',
                    'trapvcw','trapvsw','trapccl','trapcsl','trapeql','tpfl','trapfl','trapgel','trapgtl',
                    'traphil','traplel','traplsl','trapltl','trapmil','trapnel','trappll','traptl',
                    'trapvcl','trapvsl','trapv','scc','scs','seq','sf','sge','sgt','shi','sle','sls',
                    'slt','smi','sne','spl','st','svc','svs','sleep','stop','strldsr','subal','subaw',
                    'subib','subiw','subil','subqb','subqw','subql','subb','subw','subl','subxb','subxw',
                    'subxl','swap','swbeg','swbegl','tas','trap','trapx','tstb','tstw','tstl','unlk','unpk',
                    'wddatab','wddataw','wddatal','wdebugl','wdebug']




def count_asm_registers(asm_code):
    registers_values = [0]*len(Motorola_registers)
    for row in asm_code:
        parts = row.replace(',',' ').replace('+',' ').replace('*',' ').replace('[',' ').replace(']',' ') \
                    .replace('-',' ').split()
        for register in Motorola_registers:
            registers_values[Motorola_registers.index(register)] += parts.count(register)
    return registers_values


def count_asm_opcodes(asm_code):
    opcodes_values = [0]*len(Motorola_opcodes)
    for row in asm_code:
        parts = row.split()

        for opcode in Motorola_opcodes:
            if opcode in parts:
                opcodes_values[Motorola_opcodes.index(opcode)] += 1
                break
    return opcodes_values


def count_asm_APIs(asm_code, apis):
    apis_values = [0]*len(apis)
    for row in asm_code:
        for i in range(len(apis)):
            if apis[i] in row:
                apis_values[i] += 1
                break
    return apis_values



def get_elf_file_list(ext_drive, packer_id_feature_file, file_id_feature_file, trid_id_feature_file):
    # Load the malware packer id features and file id features from the sample set.
    packer_id_features = pd.read_csv(packer_id_feature_file)
    file_id_features = pd.read_csv(file_id_feature_file)
    trid_id_features = pd.read_csv(trid_id_feature_file)
    
    counter = 0

    file_names_list = file_id_features['file_name']
    file_list = []
    write_list = []
    fid_list = []
    
    for idx, file_name in enumerate(file_names_list):
        trid_name = trid_id_features.iloc[idx, 1]
        fid_name = file_id_features.iloc[idx, 1]
        
        if trid_name.find('ELF') > -1 or fid_name.find('ELF') > -1:
            if 'Motorola' in fid_name:
                print('Found: {:s} - {:s}'.format(trid_name, fid_name))
                counter += 1
                full_name = ext_drive + "VirusShare_" + file_name
                write_list.append(full_name + "\n")
                file_list.append(full_name)
                fid_list.append(fid_name)


        
    fop = open('data/elf-motorola-file-list.txt','w')
    fop.writelines(write_list)
    fop.close()
    
    print("Got {:d} ELF Motorola filenames.".format(counter))

    return file_list, fid_list


                


def extract_asm_features(asm_files, feature_file, api_file):
    # Extract features from test/training asm files, file list is passed in as a parameter.
    
    pid = os.getpid()
    print('Process id:', pid)
    feature_path = 'data/' + feature_file # libc API, symbols, registers, opcodes, etc...   
    print('feature file:', feature_file)

    fapi = open('data/' + api_file)
    defined_apis = fapi.readlines()
    for idx, fname in defined_apis:
        defined_apis[idx] = fname.rstrip() # Remove newlines, they are annoying.

    #asm_files = [i for i in tfiles if '.asm' in i]
    ftot = len(asm_files)
    
    feature_counts = []
    with open(feature_path, 'w') as f:
        # write the csv header
        fw = writer(f)
        colnames = ['file_name'] + Motorola_registers + Motorola_opcodes + defined_apis
        fw.writerow(colnames)
        
        for idx, fname in enumerate(asm_files):
            fasm = open(ext_drive + fname, 'r')
            content = fasm.readlines()
            
            reg_vals = count_asm_registers(content)
            opc_vals = count_asm_opcodes(content)
            api_vals = count_asm_APIs(content, defined_apis)
            #sec_vals = count_asm_sections(content)
            #mis_vals = count_asm_misc(content)
            count_vals = reg_vals + opc_vals + api_vals
            
            feature_counts.append([fname[fname.find('VirusShare_'):]] + count_vals)   
            
            # Writing rows after every 10 files processed
            if (idx+1) % 10 == 0:
                print("{:d} Processed {:d} of {:d} total files.".format(pid, idx + 1, ftot))
                fw.writerows(feature_counts)
                feature_counts = []
                
        # Writing remaining files
        if len(feature_counts) > 0:
            fw.writerows(feature_counts)
            feature_counts = []

    
    feats = pd.read_csv(feature_file)
    # DataFrame.sort() is deprecated, but this is an old version of pandas, does not have sort_values().
    sorted_feats = feats.sort('file_name')
    sorted_feats.to_csv('data/sorted-' + feature_file, index=False)
    
    return




# Start of Script


# TODO: add command line arguments to specify file names.

#ext_drive = '/opt/vs/train2/'
#packer_id_file = 'data/sorted-packer-id-features-vs252.csv'
#file_id_file = 'data/sorted-file-id-features-vs252.csv'
#trid_id_file = 'data/sorted-trid-id-features-vs252.csv'
    
#unflist, fidlist = get_elf_file_list(ext_drive, packer_id_file, file_id_file, trid_id_file)


ext_drive = '/opt/vs/train1asm/'

packer_id_file = 'data/sorted-packer-id-features-vs251.csv'
file_id_file = 'data/sorted-file-id-features-vs251.csv'
trid_id_file = 'data/sorted-trid-id-features-vs251.csv'
    
file_list, fid_list = get_elf_file_list(ext_drive, packer_id_file, file_id_file, trid_id_file)


print("Total Motorola Files: {:d}".format(len(file_list)))

extract_asm_features(file_list, "elf-motorola-asm-features.csv", "elf-libc-api.txt")


# End of Script
    















