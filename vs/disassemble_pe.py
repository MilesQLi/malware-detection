# disassemble_unpacked_pe.py
#
# Input : sorted-packer-id-features.csv
#         entry format = [file_name]
#                        [packer_name]
#                        [packer_id]
#                        [valid_pe]
#                        [is_packed]
#
# Output: assembler files [input_binary_filename.asm]
#         unpacked_file_list.txt
#
# Author: Derek Chadwick
# Date  : 12/08/2016

import subprocess as sub
from optparse import OptionParser
from multiprocessing import Pool
import os
import peutils
import pefile
import sys
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn


def write_unpacked_file_list(packer_id_feature_file, unpacked_list_file_name):
    # Load the malware packer id features sets from the sample set.
    packer_id_features = pd.read_csv(packer_id_feature_file)
    unpacked_files = packer_id_features[packer_id_features['is_packed'] == 0]
    unpacked_pe_files = unpacked_files[unpacked_files['valid_pe'] == 1]
    
    fop = open(unpacked_list_file_name, 'w')
    counter = 0
    
    for file_name in unpacked_pe_files['file_name']:
        full_name = "VirusShare_" + file_name + "\n"
        fop.write(full_name)
        counter += 1

    print("Write {:d} filenames.".format(counter))

    fop.close()
    
    return


def disassemble_pe_binaries(file_list):
    # Use command "objdump -D file_name -o file_name.asm" to dump out all sections of the PE binary.
    counter = 0
    disassed = 0
    error_count = 0
    command_line = ''
    
    for file_name in file_list:
        file_name = file_name.rstrip() # remove the newlines or else !!!
        file_path = ext_drive + file_name
        if (os.path.isfile(file_path)):
            asm_file_name = file_name + ".asm"
            command_line = "objdump -D {:s} > {:s}".format(file_name, asm_file_name)
            # Run objdump on it.
            sub.call(["objdump", "-D", file_name, ">", asm_file_name])
            disassed += 1
        else:
            #print("Error: file does not exist - {:s}".format(file_path))
            error_count += 1
           
        counter += 1
        if (counter % 1000) == 0: # print progress
            print('Disassembled: {:d} - {:s}'.format(counter, command_line))    
            
    print("Disassembled {:d} binaries with {:d} file path errors.".format(disassed, error_count))
    
    return


# Start of Script



parser = OptionParser()
parser.add_option("-i", "--inputfile", dest="inputfilename")
parser.add_option("-w", "--writelist", action="store_true", dest="writefilelist", default=False)
parser.add_option("-o", "--outputfile", dest="outputfilename")
parser.add_option("-f", "--featurefile", dest="featurefilename")
parser.add_option("-e", "--extdrive", dest="externaldrive")

(options, args) = parser.parse_args()


# Load the malware packer id features sets.
ext_drive = '/opt/vs/train'
write_file_list = options.writefilelist
feature_file = options.featurefilename
in_unpacked_file_list = options.inputfilename
out_unpacked_file_list = options.outputfilename

if write_file_list == True:
    write_unpacked_file_list(feature_file, out_unpacked_file_list)
else:
    fip = open(in_unpacked_file_list)
    file_list = fip.readlines()
    disassemble_pe_binaries(file_list)
    fip.close()

# End of Script