# Convert ClamAV and Windows Defender reports to csv files.
#
# Author: Derek Chadwick
# Date  : 30/07/2016

import os
from csv import writer
import numpy as np
import pandas as pd
import math
import scipy.misc
import array
import time as tm
import io # this is required as a compatability layer between 2.x and 3.x because 2.x cannot read utf-16 text files.
import re


def process_clamav_report(vlines, outfile):
    counter = 0
    outlines = []
    for idx, line in enumerate(vlines):
        if line.startswith('---'): # we hit the scan summary at end of file.
            break
        else:
            line = line.rstrip() # get rid of newlines they are annoying
            line = line.replace('_', ' ').replace(':', ' ') # get rid of these things they are annoying
            tokens = line.split()
            if len(tokens) > 2:
                malware_file_name = tokens[1]
                malware_type = tokens[2]
                outlines.append([malware_file_name, malware_type])
                counter += 1
                if (idx % 1000) == 0: # write out some lines
                    outfile.writerows(outlines)
                    outlines = []
                    print("Processed line number {:d} : {:s} -> {:s}.".format(idx, malware_file_name, malware_type))
            
    # Finish off.
    if (len(outlines) > 0):
        outfile.writerows(outlines)
        outlines = []
        
    print("Completed processing {:d} lines.".format(counter))


def process_defender_report(vlines, outfile):
    counter = 0
    outlines = []
    for idx, line in enumerate(vlines):
        if line.find('DETECTION') > 0: # we hit the scan summary at end of file.
            line = line.rstrip() # get rid of newlines they are annoying
            #line = line.replace('_', ' ').replace(':', ' ') 
            tokens = line.split()
            if len(tokens) > 2:
                temp_file_name = tokens[3]
                malware_type = tokens[2]
                temp_file_name = temp_file_name.replace('_',' ').replace('->',' ')
                path_tokens = temp_file_name.split()
                malware_file_name = path_tokens[1]
                outlines.append([malware_file_name, malware_type])
                counter += 1
                if (idx % 1000) == 0: # write out some lines
                    outfile.writerows(outlines)
                    outlines = []
                    print("Processed line number {:d} : {:s} -> {:s}.".format(idx, malware_file_name, malware_type))
            
    # Finish off.
    if (len(outlines) > 0):
        outfile.writerows(outlines)
        outlines = []
        
    print("Completed processing {:d} lines.".format(counter))


# Start of script execution


log("[*] Started at %s" % time.strftime("%Y-%m-%d %H:%M:%S"))


# Load in the av report and convert to csv file.
file_name = sys.argv[1]
vfr = open(file_name, 'r')
vlines = vfr.readlines()


# Open the output csv file.
fop = open('data/avreport.csv', 'w')
csv_wouter = writer(fop)
cols = ['filename','malware_type'] # write out the column names.
csv_wouter.writerow(cols)

if file_name.startswith('vs'):
    process_clamav_report(vlines, csv_wouter)
else:
    process_defender_report(vlines, csv_wouter)

vfr.close()
fop.close()


log("[*] Completed at %s" % time.strftime("%Y-%m-%d %H:%M:%S"))


