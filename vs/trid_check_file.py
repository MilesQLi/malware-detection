import os
import peutils
import pefile
import sys
import re
import subprocess as sub


def process_files(file_list):
    # Iterate over the file list and output the results from the "file" command.
    out_list = []
    file_counter = 0
    pid = os.getpid()
    file_name = "data/" + str(pid) + "-file-id.csv"
    fop = open(file_name,'w')
    
    for idx, file_name in enumerate(file_list):
        file_name = file_name.rstrip() # remove the newlines or else !!!
        file_path1 =  ext_drive + file_name

        if (os.path.isfile(file_path1)):
            print("File: {:s}".format(file_path1))
            signat = sub.check_output(["file","-b", file_path]) # Use the brief option, we do not need the file name.
            signat = signat.replace(',','').rstrip() # get rid of newlines and commas they are annoying
            out_lines.append(signat)
        
        if (idx % 1000) == 0: # print progress
            fop.writelines(out_lines)
            out_lines = []
            print('{:s} - {:s} - {:d} - {:s}'.format(str(pid), file_name, idx, signat))
            
            
    if len(out_lines) > 0:
        fop.writelines(out_lines)
        out_lines = []    

    fop.close()
    
    return


def process_trids(file_list):
    # Iterate over the file list and output the results from TrID.
    out_list = []
    file_counter = 0
    pid = os.getpid()
    file_name = "data/" + str(pid) + "-trid-id.csv"
    fop = open(file_name,'w')
    
    for idx, file_name in enumerate(file_list):
        file_name = file_name.rstrip() # remove the newlines or else !!!
        file_path1 =  ext_drive + file_name

        if (os.path.isfile(file_path1)):
            print("File: {:s}".format(file_path1))
            signat = sub.call(["/opt/vs/trid", file_path1])
            out_lines.append(signat)
            
        if (idx % 1000) == 0: # print progress
            fop.writelines(out_lines)
            out_lines = []
            print('{:s} - {:s} - {:d} - {:s}'.format(str(pid), file_name, idx, signat))
            
            
    if len(out_lines) > 0:
        fop.writelines(out_lines)
        out_lines = []                
     
    fop.close()
    
    return


# Start of Script

ext_drive_list = [ "/opt/vs/apt/", "/opt/vs/train1/", "/opt/vs/train2/", "/opt/vs/train3/", "/opt/vs/train4/"]


for idx, ext_drive in enumerate(ext_drive_list):
    tfiles = os.listdir(ext_drive)
    quart = len(tfiles)/4
    train1 = tfiles[:quart]
    train2 = tfiles[quart:(2*quart)]
    train3 = tfiles[(2*quart):(3*quart)]
    train4 = tfiles[(3*quart):]

    print("Files: {:d} - {:d} - {:d}".format(len(tfiles), quart, (len(train1)+len(train2)+len(train3)+len(train4))))

    trains = [train1, train2, train3, train4]
    p = Pool(4)
    p.map(process_files, trains)
    
    print('Completed processing {:d} files.'.format(len(tfiles))) 

for idx, ext_drive in enumerate(ext_drive_list):
    tfiles = os.listdir(ext_drive)
    quart = len(tfiles)/4
    train1 = tfiles[:quart]
    train2 = tfiles[quart:(2*quart)]
    train3 = tfiles[(2*quart):(3*quart)]
    train4 = tfiles[(3*quart):]

    print("Files: {:d} - {:d} - {:d}".format(len(tfiles), quart, (len(train1)+len(train2)+len(train3)+len(train4))))

    trains = [train1, train2, train3, train4]
    p = Pool(4)
    p.map(process_trids, trains)
    
    print('Completed processing {:d} files.'.format(len(tfiles)))
    
# End of Script
    
    
    

        