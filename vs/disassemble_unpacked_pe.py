#
# Input : sorted-packer-id-features.csv
#         entry format = [file_name]
#                        [packer_name]
#                        [packer_id]
#                        [valid_pe]
#                        [is_packed]
#
# Output: assembler files [input_binary_filename.asm]
#         unpacked_file_list.txt
#
# Author: Derek Chadwick
# Date  : 12/08/2016


def write_unpacked_file_list(packer_id_feature_file):
    # Load the malware packer id features sets from the sample set.
    packer_id_features = pd.read_csv(packer_id_feature_file)
    unpacked_files = packer_id_features[packer_id_features['is_packed'] == 0]
    unpacked_pe_files = unpacked_files[unpacked_files['valid_pe'] == 1]
    
    fop = open('data/unpacked_file_list.txt', 'w')
    counter = 0
    
    for file_name in unpacked_pe_files['file_name']:
        full_name = "VirusShare_" + file_name + "\n"
        fop.write(full_name)
        counter += 1

    print("Write {:d} filenames.".format(counter))
    
    return


def disassemble_pe_binaries(file_list):
    # Use command "objdump -D file_name" to dump out all sections of the PE binary.
    counter = 0
    disassed = 0
    error_count = 0
    for file_name in file_list:
        file_name = file_name.rstrip() # remove the newlines or else !!!
        file_path = ext_drive + file_name
        if (os.path.isfile(file_path)):
            # Run objdump on it.
            disassed += 1
        else:
            #print("Error: file does not exist - {:s}".format(file_path))
            error_count += 1
           
        counter += 1
        if (counter % 1000) == 0: # print progress
            print('Disassembled: {:d} - {:s}'.format(counter,file_name))    
            
    print("Disassembled {:d} binaries with {:d} file path errors.".format(disassed, error_count))
    
    return


# Start of Script

# Load the malware packer id features sets.
ext_drive = '/opt/vs/train'

write_unpacked_file_list('data/sorted-packer-id-features-vs251-252.csv')
fip = open("data/unpacked_file_list.txt")
file_list = fip.readlines()
disassemble_pe_binaries(unpacked_pe_files['file_name'])
