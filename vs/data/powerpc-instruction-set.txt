tdi Trap Doubleword Immediate

twi Trap Word Immediate

mulli Multiply Low Immediate

subficSubtract From Immediate Carrying

cmpli Compare Logical Immediate

cmpi Compare Immediate

addic Add Immediate Carrying

addi Add Immediate

addis Add Immediate Shifted

bc[l][a] Branch Conditional

sc System Call

mcrf Move Condition Register Field

bclr[l] Branch Conditional to Link Register

rfid Return from Interrupt Doubleword

crnor Condition Register NOR

crandc Condition Register AND with Complement

isync Instruction            Synchronize

crxor Condition Register XOR

crnand Condition Register NAND

crand Condition Register AND

hrfid Hypervisor Return from Interrupt Doubleword

creqv Condition Register Equivalent

crorc Condition Register OR with Complement
 
cror Condition Register OR

bcctr[l] Branch Conditional to Count Register

rlwimi[.] Rotate Left Word Immediate then Mask Insert

rlwinm[.] Rotate Left Word Immediate then AND with Mask

rlwnm[.] Rotate Left Word then AND with Mask
 
ori OR Immediate
 
oris OR Immediate Shifted

xori XOR Immediate

xoris XOR Immediate Shifted

andi. AND Immediate

andis. AND Immediate Shifted

rldicl[.] Rotate Left Doubleword Immediate then Clear Left

rldicr[.] Rotate Left Doubleword Immediate then Clear Right

rldic[.] Rotate Left Doubleword Immediate then Clear

rldimi[.] Rotate Left Doubleword Immediate then Mask Insert

rldcl[.] Rotate Left Doubleword then Clear Left

rldcr[.] Rotate Left Doubleword then Clear Right

cmp Compare

tw Trap Word

subfc[o][.] Subtract From Carrying

mulhdu[.] Multiply High Doubleword Unsigned

addc[o][.]
Add Carrying

mulhwu[.] 
Multiply High Word Unsigned

mfcr
Move From Condition Register
mfocrf
Move From One Condition Register Field

lwarx 
Load Word And Reserve Indexed

ldx 
Load Doubleword Indexed

lwzx
Load Word and Zero Indexed

slw[.]
Shift Left Word

cntlzw[.] 
Count Leading Zeros Word

sld[.]
Shift Left Doubleword

and[.]
AND

cmpl
Compare Logical

subf[o][.]
Subtract From

ldux
Load Doubleword with Update Indexed

dcbst 
Data Cache Block Store

lwzux 
Load Word and Zero with Update Indexed

cntlzd[.] 
Count Leading Zeros Doubleword

andc[.] 
AND with Complement

td
Trap Doubleword

mulhd[.]
Multiply High Doubleword

mulhw[.]
Multiply High Word

mfmsr 
Move From Machine State Register

ldarx 
Load Doubleword And Reserve Indexed

dcbf
Data Cache Block Flush
X
31
 87
 34 
lbzx
Load Byte and Zero Indexed
XO           31
104
SR
           55           neg[o][.]            Negate
X
31
119
 34 
lbzux 
Load Byte and Zero with Update Indexed
X
31
122
70
popcntb
Population Count Bytes
X
31
124
SR
 68 
nor[.]
NOR
XO 
31
136
SR
 54
subfe[o][.] 
Subtract From Extended
XO 
31
138
SR
 54 
adde[o][.]
Add Extended
XFX
31
144
 83
mtcrf 
Move To Condition Register Fields
XFX
31
144
124     mtocrf
Move To One Condition Register Field
X
31
146
III
mtmsr 
Move To Machine State Register
X
31
149
 43 
stdx
Store Doubleword Indexed
X
31
150
 II
stwcx.
Store Word Conditional Indexed
X
31
151
 42
stwx
Store Word Indexed
X
31
178
III
mtmsrd
Move To Machine State Register Doubleword
X
31
181
 43 
stdux 
Store Doubleword with Update Indexed
X
31
183
 42
stwux 
Store Word with Update Indexed
XO 
31
200
SR
 55 
subfze[o][.]
Subtract From Zero Extended
XO 
31
202
SR
 55 
addze[o][.] 
Add to Zero Extended
X
31
210
32
III
mtsr
Move To Segment Register
X
31
214
 II
stdcx.
Store Doubleword Conditional Indexed
X
31
215
 40
stbx
Store Byte Indexed
XO 
31
232
SR
 54 
subfme[o][.]
Subtract From Minus One Extended
XO 
31
233
SR
 56 
mulld[o][.] 
Multiply Low Doubleword
XO 
31
234
SR
 54
addme[o][.] 
Add to Minus One Extended
XO 
31
235
SR
 56 
mullw[o][.] 
Multiply Low Word
X
31
242
32
III
mtsrin
Move To Segment Register Indirect
X
31
246
 II
dcbtst
Data Cache Block Touch for Store
X
31
247
 40 
stbux 
Store Byte with Update Indexed
XO           31
266
SR
           52           add[o][.]            Add
X
31
278
 II
dcbt
Data Cache Block Touch
X
31
279
 35
lhzx
Load Halfword and Zero Indexed
X
31
284
SR
 68 
eqv[.]
Equivalent
X
31
306
64
III
tlbie 
TLB Invalidate Entry
Form
Opcode
Mode 
Dep.
1
Page /
Bk
Mnemonic
Instruction
Primary  Extend
1
See key to mode dependency column, on page 213.
Appendix J. PowerPC Instruction Set Sorted by Opcode    205
Version 2.02
X
31
310
 II
eciwx 
External Control In Word Indexed
X
31
311
 35 
lhzux 
Load Halfword and Zero with Update Indexed
X
31
316
SR
 67 
xor[.]
XOR
XFX
31
339
 82 
mfspr 
Move From Special Purpose Register
X
31
341
 38 
lwax
Load Word Algebraic Indexed
X
31
343
 36 
lhax
Load Halfword Algebraic Indexed
X
31
370
III
tlbia 
TLB Invalidate All
XFX
31
371
 II
mftb
Move From Time Base
X
31
373
 38 
lwaux 
Load Word Algebraic with Update Indexed
X
31
375
 36 
lhaux 
Load Halfword Algebraic with Update Indexed
X
31
402
III
slbmte
SLB Move To Entry
X
31
407
 41 
sthx
Store Halfword Indexed
X
31
412
SR
 68 
orc[.]
OR with Complement
XS 
31
413
SR
 79 
sradi[.]
Shift Right Algebraic Doubleword Immediate
X
31
434
III
slbie                 SLB                 Invalidate                 Entry
X
31
438
 II
ecowx 
External Control Out Word Indexed
X
31
439
 41
sthux 
Store Halfword with Update Indexed
X
31
444
SR
 67 
or[.] 
OR
XO 
31
457
SR
 59
divdu[o][.] 
Divide Doubleword Unsigned
XO 
31
459
SR
 59 
divwu[o][.] 
Divide Word Unsigned
XFX
31
467
 81 
mtspr 
Move To Special Purpose Register
X
31
476
SR
 67 
nand[.] 
NAND
XO 
31
489
SR
 58 
divd[o][.]
Divide Doubleword
XO 
31
491
SR
 58 
divw[o][.]
Divide Word
X
31
498
III
slbia                 SLB                 Invalidate                 All
X
31
512
135     mcrxr 
Move to Condition Register from XER
X
31
533
 48 
lswx
Load String Word Indexed
X
31
534
 44
lwbrx 
Load Word Byte-Reverse Indexed
X
31
535
104     lfsx
Load Floating-Point Single Indexed
X
31
536
SR
 78 
srw[.]
Shift Right Word
X
31
539
SR
 78 
srd[.]
Shift Right Doubleword
X
31
566
III
tlbsync              TLB              Synchronize
X
31
567
104     lfsux 
Load Floating-Point Single with Update Indexed
X
31
595
32
III
mfsr
Move From Segment Register
X
31
597
 48 
lswi
Load String Word Immediate
X
31
598
 II
sync
Synchronize
X
31
599
105     lfdx
Load Floating-Point Double Indexed
X
31
631
105     lfdux 
Load Floating-Point Double with Update Indexed
X
31
659
32
III
mfsrin
Move From Segment Register Indirect
X
31
661
 49 
stswx 
Store String Word Indexed
X
31
662
 45 
stwbrx
Store Word Byte-Reverse Indexed
X
31
663
107     stfsx 
Store Floating-Point Single Indexed
X
31
695
107     stfsux
Store Floating-Point Single with Update Indexed
X
31
725
 49 
stswi 
Store String Word Immediate
X
31
727
108     stfdx 
Store Floating-Point Double Indexed
X
31
759
108     stfdux
Store Floating-Point Double with Update Indexed
X
31
790
 44 
lhbrx 
Load Halfword Byte-Reverse Indexed
X
31
792
SR
 80 
sraw[.] 
Shift Right Algebraic Word
X
31
794
SR
 80 
srad[.] 
Shift Right Algebraic Doubleword
X
31
824
SR
 79 
srawi[.]
Shift Right Algebraic Word Immediate
X
31
851
III
slbmfev 
SLB Move From Entry VSID
X
31
854
 II
eieio 
Enforce In-order Execution of I/O
X
31
915
III
slbmfee 
SLB Move From Entry ESID
X
31
918
 45 
sthbrx
Store Halfword Byte-Reverse Indexed
X
31
922
SR
 69 
extsh[.]
Extend Sign Halfword
X
31
954
SR
 69 
extsb[.]
Extend Sign Byte
X
31
982
 II
icbi
Instruction Cache Block Invalidate
X
31
983
109     stfiwx
Store Floating-Point as Integer Word Indexed
X
31
986
SR
 69 
extsw[.]
Extend Sign Word
X
31
1014
 II
dcbz
Data Cache Block set to Zero
D
32
 37 
lwz 
Load Word and Zero
D
33
 37 
lwzu
Load Word and Zero with Update
Form
Opcode
Mode 
Dep.
1
Page /
Bk
Mnemonic
Instruction
Primary  Extend
1
See key to mode dependency column, on page 213.
Version 2.02
206     PowerPC User Instruction Set Architecture
D
34
 34 
lbz 
Load Byte and Zero
D
35
 34 
lbzu
Load Byte and Zero with Update
D
36
 42 
stw 
Store Word
D
37
 42 
stwu
Store Word with Update
D
38
 40 
stb 
Store Byte
D
39
 40 
stbu
Store Byte with Update
D
40
 35 
lhz 
Load Halfword and Zero
D
41
 35 
lhzu
Load Halfword and Zero with Update
D
42
 36 
lha 
Load Halfword Algebraic
D
43
 36 
lhau
Load Halfword Algebraic with Update
D
44
 41 
sth 
Store Halfword
D
45
 41 
sthu
Store Halfword with Update
D
46
 46 
lmw 
Load Multiple Word
D
47
 46 
stmw
Store Multiple Word
D
48
                       104                       lfs                       Load                       Floating-Point                       Single
D
49
104     lfsu
Load Floating-Point Single with Update
D
50
                       105                       lfd                       Load                       Floating-Point                       Double
D
51
105     lfdu
Load Floating-Point Double with Update
D
52
107     stfs
Store Floating-Point Single
D
53
107     stfsu 
Store Floating-Point Single with Update
D
54
108     stfd
Store Floating-Point Double
D
55
108     stfdu 
Store Floating-Point Double with Update
DS           58
0
           39           ld
Load           Doubleword
DS 
58
1
 39 
ldu 
Load Doubleword with Update
DS 
58
2
 38 
lwa 
Load Word Algebraic
A
59
 18
112     fdivs[.]
Floating Divide Single
A
59
 20
111     fsubs[.]
Floating Subtract Single
A
59
 21
111     fadds[.]
Floating Add Single
A
59
 22
125     fsqrts[.] 
Floating Square Root Single
A
59
 24
125     fres[.] 
Floating Reciprocal Estimate Single
A
59
 25
112     fmuls[.]
Floating Multiply Single
A
59
26
126
frsqrtes[.]
Floating Reciprocal Square Root Estimate Single
A
59
 28
113     fmsubs[.] 
Floating Multiply-Subtract Single
A
59
 29
113     fmadds[.] 
Floating Multiply-Add Single
A
59
 30
114     fnmsubs[.]
Floating Negative Multiply-Subtract Single
A
59
 31
114     fnmadds[.]
Floating Negative Multiply-Add Single
DS 
62
0
 43 
std 
Store Doubleword
DS 
62
1
 43 
stdu
Store Doubleword with Update
X
63
0
119     fcmpu 
Floating Compare Unordered
X
63
 12
115     frsp[.] 
Floating Round to Single-Precision
X
63
 14
117     fctiw[.]
Floating Convert To Integer Word
X
63
 15
117     fctiwz[.] 
Floating Convert To Integer Word with round toward Zero
A
63
 18
112     fdiv[.] 
Floating Divide
A
63
 20
111     fsub[.] 
Floating Subtract
A
63
 21
111     fadd[.] 
Floating Add
A
63
 22
125     fsqrt[.]
Floating Square Root
A
63
 23
126     fsel[.] 
Floating Select
A
63
24
125
fre[.]
Floating Reciprocal Estimate
A
63
 25
112     fmul[.] 
Floating Multiply
A
63
 26
126     frsqrte[.]
Floating Reciprocal Square Root Estimate
A
63
 28
113     fmsub[.]
Floating Multiply-Subtract
A
63
 29
113     fmadd[.]
Floating Multiply-Add
A
63
 30
114     fnmsub[.] 
Floating Negative Multiply-Subtract
A
63
 31
114     fnmadd[.] 
Floating Negative Multiply-Add
X
63
 32
119     fcmpo 
Floating Compare Ordered
X
63
 38
122     mtfsb1[.] 
Move To FPSCR Bit 1
X
63
 40
110     fneg[.] 
Floating Negate
X
63
 64
120     mcrfs 
Move to Condition Register from FPSCR
X
63
 70
122     mtfsb0[.] 
Move To FPSCR Bit 0
X
63
 72
110     fmr[.]
Floating Move Register
X
63
134
121     mtfsfi[.] 
Move To FPSCR Field Immediate
X
63
136
110     fnabs[.]
Floating Negative Absolute Value
Form
Opcode
Mode 
Dep.
1
Page /
Bk
Mnemonic
Instruction
Primary  Extend
1
See key to mode dependency column, on page 213.
Appendix J. PowerPC Instruction Set Sorted by Opcode    207
Version 2.02
X
63
264
110     fabs[.] 
Floating Absolute Value
X
63
583
120     mffs[.] 
Move From FPSCR
XFL
63
711
121     mtfsf[.]
Move To FPSCR Fields
X
63
814
116     fctid[.]
Floating Convert To Integer Doubleword
X
63
815
116     fctidz[.] 
Floating Convert To Integer Doubleword with round 
toward Zero
X
63
846
118     fcfid[.]
Floating Convert From Integer Doubleword
Form
Opcode
Mode 
Dep.
1
Page /
Bk
Mnemonic
Instruction
Primary  Extend
1
See key to mode dependency column, o
