# feature_extraction_elf_mips_asm.py
#
# Read a list of ELF MIPS and section header files generated by objdump and extract
# feature sets from them.
#
# ELF executable platforms include: x86, amd64, ARM, SPARC, MIPS, Motorola, PowerPC, Renesas (SuperH).
#
# Input: A list of ELF MIPS assembler files.
#
# Output: sorted-elf-mips-features-asm.csv
#         row format = [file_name, [list of register counts], [list of opcode counts], [list of api functions]]
#
# Author: Derek Chadwick
# Date  : 24/09/2016
#
# TODO: all of the things

from multiprocessing import Pool
import os
from csv import writer
import numpy as np
import pandas as pd
import math
import scipy.misc
import array
import time as tm
import re
import subprocess as sub


MIPS_registers = ['$zero','$at','$v0','$v1','$a0','$a1','$a2','$a3','$a4','$a5','$a6','$a7',
                  '$t4','$t5','$t6','$t7','$s0','$s1','$s2','$s3','$s4','$s5','$s6','$s7',
                  '$t8','$t9','$k0','$k1','$gp','$sp','$s8','$fp','$ra',
                  '$0','$1','$2','$3','$4','$5','$6','$7','$8','$9','$10','$11','$12','$13','$14','$15',
                  '$16','$17','$18','$19','$20','$21','$22','$23','$24','$25','$26','$27','$28','$29','$30','$31']

MIPS_opcodes = ['pref','prefx','nop','ssnop','ehb','li','move','b','nal','bal','bc','balc','lapc',
                'la','campi','campv','camwi','ramri','gsle','gsgt','gslble','gslbgt','gslhle',
                'gslhgt','gslwle','gslwgt','gsldle','gsldgt','gssble','gssbgt','gsshle','gsshgt',
                'gsswle','gsswgt','gssdle','gssdgt','gslwlec1','gslwgtc1','gsldlec1','gsldgtc1',
                'gsswlec1','gsswgtc1','gssdlec1','gssdgtc1','gslwlc1','gslwrc1','gsldlc1','gsldrc1',
                'gsswlc1','gsswrc1','gssdlc1','gssdrc1','gslbx','gslhx','gslwx','gsldx','gssbx',
                'gsshx','gsswx','gssdx','gslwxc1','gsldxc1','gsswxc1','gssdxc1','gslq','gssq',
                'gslqc1','gssqc1','vabs','vadd','vaddi','vaddq','vaddw','vaddx','vaddy','vaddz',
                'vadda','vaddai','vaddaq','vaddaw','vaddax','vadday','vaddaz','vcallms','vcallmsr',
                'vclipw','vdiv','vftoi0','vftoi4','vftoi12','vftoi15','viadd','viaddi','viand',
                'vilwr','vior','viswr','visub','vitof0','vitof4','vitof12','vitof15','vlqd',
                'vlqi','vmadd','vmaddi','vmaddq','vmaddw','vmaddx','vmaddy','vmaddz','vmadda',
                'vmaddai','vmaddaq','vmaddaw','vmaddax','vmadday','vmaddaz','vmax','vmaxi','vmaxw',
                'vmaxx','vmaxy','vmaxz','vmfir','vmini','vminii','vminiw','vminix','vminiy',
                'vminiz','vmove','vmr32','vmsub','vmsubi','vmsubq','vmsubw','vmsubx','vmsuby',
                'vmsubz','vmsuba','vmsubai','vmsubaq','vmsubaw','vmsubax','vmsubay','vmsubaz',
                'vmtir','vmul','vmuli','vmulq','vmulw','vmulx','vmuly','vmulz','vmula','vmulai',
                'vmulaq','vmulaw','vmulax','vmulay','vmulaz','vnop','vopmula','vopmsub','vrget',
                'vrinit','vrnext','vrsqrt','vrxor','vsqd','vsqi','vsqrt','vsub','vsubi','vsubq',
                'vsubw','vsubx','vsuby','vsubz','vsuba','vsubai','vsubaq','vsubaw','vsubax',
                'vsubay','vsubaz','vwaitq','abs','aclr','add','adda','addi','addiu','addiupc',
                'addl','addr','addu','alni','alnv','and','andi','aset','baddu','bbit032',
                'bbit0','bbit132','bbit1','bc1any2f','bc1any2t','bc1any4f','bc1any4t','bc1eqz',
                'bc1f','bc1fl','bc1nez','bc1t','bc1tl','beqz','beqzl','beq','beql','bge','bgel',
                'bgeu','bgeul','bgez','bgezl','bgezal','bgezall','bgt','bgtl','bgtu','bgtul',
                'bgtz','bgtzl','ble','blel','bleu','bleul','blez','blezl','blt','bltl','bltu',
                'bltul','bltz','bltzl','bltzal','bltzall','bnez','bnezl','bne','bnel','break',
                'cabs','flushi','flushd','flushid','wb','cache','ceil','cfc1','cftc1','cftc2',
                'cins32','cins','clo','clz','ctc1','cttc1','cttc2','cvt','dabs','dadd','daddi',
                'daddiu','daddu','daddwc','dbreak','dclo','dclz','dctr','dctw','deret','dext',
                'dextm','dextu','dmod','ddiv','dmodu','ddivu','di','dins','dinsm','dinsu','mod',
                'modu','div','div1','divu','divu1','dla','dlca','dli','dmacc','dmacchi','dmacchis',
                'dmacchiu','dmacchius','dmaccs','dmaccu','dmaccus','dmadd16','dmfc0','dmfgc0','dmt',
                'dmtc0','dmtgc0','dmfc1','dmtc1','dmuh','dmul','dmulo','dmulou','dmult','dmulu',
                'dmuhu','dmultu','dneg','dnegu','dpop','drem','dremu','dret','drol','dror','drorv',
                'dror32','drotl','drotr','drotrv','drotr32','dsbh','dshd','dsllv','dsll32','dsll',
                'dsrav','dsra32','dsra','dsrlv','dsrl32','dsrl','dsub','dsubu','dvpe','dvp','ei',
                'emt','eret','eretnc','evpe','evp','ext','exts32','exts','floor','hibernate',
                'hypcall','ins','iret','jr','j','jalr','jal','jalx','laa','laad','lac','lacd',
                'lad','ladd','lai','laid','las','lasd','law','lawd','lb','lbu','lbx','lbux',
                'ldx','lhx','lhux','lwx','lwux','lca','ldpc','ld','ldaddw','ldaddwu','ldaddd',
                'ldc1','l','ldc2','ldc3','ldl','ldr','ldxc1','lh','lhu','ll','lld','lq','lqc2',
                'lui','luxc1','lwpc','lw','lwc0','lwc1','lwc2','lwc3','lwl','lcache','lwr',
                'flush','fork','lwupc','lwu','lwxc1','lwxs','macc','maccs','macchi','macchis',
                'macchiu','macchius','maccu','maccus','mad','madu','madd','madd1','madda',
                'maddp','maddu','maddu1','madd16','max','mfbpc','mfdab','mfdabm','mfdvb',
                'mfdvbm','mfiab','mfiabm','mfpc','mfps','mftacx','mftc0','mftc1','mftc2',
                'mftdsp','mftgpr','mfthc1','mfthc2','mfthi','mftlo','mftr','mfc0','mfgc0',
                'mfhc0','mfhgc0','mfc1','mfhc1','mfdr','mfhi','mfhi1','mflo','mflo1','mflhxu',
                'mfcr','mfsa','min','mov','movf','movn','movnz','ffc','movt','movz','ffs','msac',
                'msacu','msachi','msachiu','msgn','msgsnd','msgld','msgwait','msub','msuba',
                'msubu','mtbpc','mtdab','mtdabm','mtdvb','mtdvbm','mtiab','mtiabm','mtpc',
                'mtps','mtc0','mtgc0','mthc0','mthgc0','mtc1','mthc1','mtdr','mthi','mthi1',
                'mtlo','mtlo1','mtlhx','mtcr','mtm0','mtm1','mtm2','mtp0','mtp1','mtp2','mtsa',
                'mtsab','mtsah','mttc0','mttc1','mttc2','mttacx','mttdsp','mttgpr','mtthc1',
                'mtthc2','mtthi','mttlo','mttr','mul','muh','muhu','mula','mulhi','mulhiu',
                'mull','mulo','mulou','mulr','muls','mulsu','mulshi','mulshiu','mulsl','mult',
                'mult1','multp','multu','multu1','mulu','neg','negu','nmadd','nmsub','nor',
                'not','or','ori','pabsdiff','pabsdiffc','pause','pavg','pabsh','pabsw','paddsw',
                'paddub','padduh','padduw','padsbh','pand','pceqb','pceqh','pceqw','pcgtb',
                'pcgth','pcgtw','pcpyh','pcpyld','pcpyud','pdivbw','pdivuw','pdivw','pexch',
                'pexcw','pexeh','pexew','pext5','pextlb','pextlh','pextlw','pextub','pextuh',
                'pextuw','phmadh','phmsbh','pickf','pickt','pinteh','pinth','pll','plu',
                'plzcw','pmaddh','pmadduw','pmaddw','pmaxh','pmaxw','pmfhi','pmfhl','pmflo',
                'pminh','pminw','pmsubh','pmsubw','pmthi','pmthl','pmtlo','pmulth','pmultuw',
                'pmultw','pnor','pop','por','ppac5','ppacb','ppach','ppacw','prevh','prot3w',
                'psllvw','psravw','psrlvw','psubsw','psubub','psubuh','psubuw','pxor','pul',
                'puu','pperm','qfsrv','qmac','qmacs','rach','racl','racm','recip','recip1',
                'recip2','rem','remu','rdhwr','rdpgpr','rnas','rnau','rnes','rneu','rol','ror',
                'rorv','rotl','rotr','rotrv','round','rsqrt','rsqrt1','rsqrt2','rzs','rzu','saa',
                'saad','sb','sc','scd','sd','sdbbp','sdc1','sdc2','sdc3','s','sdl','sdr','sdxc1',
                'seb','seh','selsl','selsr','seq','seqi','sge','sgeu','sgt','sgtu','sh','shfl',
                'sigrie','sle','sleu','sllv','sll','slt','slti','sltiu','sltu','sne','snei','sq',
                'sqc2','sqrt','srav','sra','srlv','srl','standby','sub','suba','subl','subu',
                'suspend','suxc1','sw','swapw','swapwu','swapd','swc0','swc1','swc2','swc3',
                'swl','scache','swr','invalidate','swxc1','synciobdma','syncs','syncw','syncws',
                'sync_acquire','sync_mb','sync_release','sync_rmb','sync_wmb','sync','synci',
                'syscall','teqi','teq','tgei','tge','tgeiu','tgeu','tlbinv','tlbinvf','tlbp',
                'tlbr','tlbwi','tlbwr','tlbgr','tlbgwi','tlbginv','tlbginvf','tlbgwr','tlbgp',
                'tlti','tlt','tltiu','tltu','tnei','tne','trunc','uld','ulh','ulhu','ulw','usd',
                'ush','usw','v3mulu','vmm0','vmulu','wach','wacl','wait','waiti','wrpgpr','wsbh',
                'xor','xori','yield','zcb','zcbt','ctc0','cfc0','bc2eqz','bc2f','bc2fl','bc2nez',
                'bc2t','bc2tl','cfc2','ctc2','dmfc2','dmtc2','mfc2','mfhc2','mtc2','mthc2','qmfc2',
                'qmtc2','bc3f','bc3fl','bc3t','bc3tl','cfc3','ctc3','dmfc3','dmtc3','mfc3','mtc3',
                'addciu','absq_s','addq','addq_s','addsc','addu_s','addwc','bitrev','bposge32',
                'bposge32c','bposge64','cmp','cmpgu','cmpu','dextpdp','dextpdpv','dextp','dextpv',
                'dextr','dextr_r','dextr_rs','dextr_s','dextrv','dextrv_r','dextrv_rs','dextrv_s',
                'dinsv','dmadd','dmaddu','dmsub','dmsubu','dmthlip','dpaq_sa','dpaq_s','dpau',
                'dpsq_sa','dpsq_s','dpsu','dshilo','dshilov','extpdp','extpdpv','extp','extpv',
                'extr_rs','extr_r','extr_s','extrv_rs','extrv_r','extrv_s','extrv','extr','insv',
                'maq_sa','maq_s','modsub','mthlip','muleq_s','muleu_s','mulq_rs','mulsaq_s',
                'packrl','pick','preceq','precequ','preceu','precrq','precrq_rs','precrqu_s',
                'raddu','rddsp','repl','replv','shilo','shilov','shll','shll_s','shllv','shllv_s',
                'shra','shra_r','shrav','shrav_r','shrl','shrlv','subq','subq_s','subu_s','wrdsp',
                'adduh','adduh_r','append','balign','cmpgdu','dpa','dps','mul_s','mulq_s','mulsa',
                'precr','precr_sra','precr_sra_r','prepend','subuh','subuh_r','addqh','addqh_r',
                'subqh','subqh_r','dpax','dpsx','dpaqx_s','dpaqx_sa','dpsqx_s','dpsqx_sa','bc0f',
                'bc0fl','bc0t','bc0tl','gsmult','gsmultu','gsdmult','gsdmultu','gsdiv','gsdivu',
                'gsddiv','gsddivu','gsmod','gsmodu','gsdmod','gsdmodu','packsshb','packsswh',
                'packushb','paddb','paddh','paddw','paddd','paddsb','paddsh','paddusb','paddush',
                'pandn','pavgb','pavgh','pcmpeqb','pcmpeqh','pcmpeqw','pcmpgtb','pcmpgth','pcmpgtw',
                'pextrh','pinsrh_0','pinsrh_1','pinsrh_2','pinsrh_3','pmaddhw','pmaxsh','pmaxub',
                'pminsh','pminub','pmovmskb','pmulhuh','pmulhh','pmullh','pmuluw','pasubub','biadd',
                'pshufh','psllh','psllw','psrah','psraw','psrlh','psrlw','psubb','psubh','psubw',
                'psubd','psubsb','psubsh','psubusb','psubush','punpckhbh','punpckhhw','punpckhwd',
                'punpcklbh','punpcklhw','punpcklwd','sequ','lbue','lhue','lbe','lhe','lle','lwe',
                'lwle','lwre','sbe','sce','she','swe','swle','swre','cachee','prefe','slli','srai',
                'srli','bclr','bclri','bset','bseti','bneg','bnegi','binsl','binsli','binsr','binsri',
                'addv','addvi','subv','subvi','max_s','maxi_s','max_u','maxi_u','min_s','mini_s',
                'min_u','mini_u','max_a','min_a','ceq','ceqi','clt_s','clti_s','clt_u','clti_u',
                'cle_s','clei_s','cle_u','clei_u','st','sat_s','sat_u','add_a','adds_a','adds_s',
                'adds_u','ave_s','ave_u','aver_s','aver_u','subs_s','subs_u','subsus_u','subsuu_s',
                'asub_s','asub_u','mulv','maddv','msubv','div_s','div_u','mod_s','mod_u','dotp_s',
                'dotp_u','dpadd_s','dpadd_u','dpsub_s','dpsub_u','sld','sldi','splat','splati','pckev',
                'pckod','ilvl','ilvr','ilvev','ilvod','vshf','srar','srari','srlr','srlri','hadd_s',
                'hadd_u','hsub_s','hsub_u','nori','bmnz','bmnzi','bmz','bmzi','bsel','bseli','shf',
                'bnz','bz','fill','pcnt','nloc','nlzc','copy_s','copy_u','insert','insve',
                'ldi','fcaf','fcun','fceq','fcueq','fclt','fcult','fcle','fcule','fsaf','fsun',
                'fseq','fsueq','fslt','fsult','fsle','fsule','fadd','fsub','fmul','fdiv','fmadd',
                'fmsub','fexp2','fexdo','ftq','fmin','fmin_a','fmax','fmax_a','fcor','fcune',
                'fcne','mul_q','madd_q','msub_q','fsor','fsune','fsne','mulr_q','maddr_q','msubr_q',
                'fclass','ftrunc_s','ftrunc_u','fsqrt','frsqrt','frcp','frint','flog2','fexupl',
                'fexupr','ffql','ffqr','ftint_s','ftint_u','ffint_s','ffint_u','ctcmsa','cfcmsa',
                'udi0','udi1','udi2','udi3','udi4','udi5','udi6','udi7','udi8','udi9','udi10',
                'udi11','udi12','udi13','udi14','udi15','lsa','dlsa','aui','auipc','daui','dahi',
                'dati','align','dalign','bitswap','dbitswap','bovc','beqzalc','beqc','bnvc',
                'bnezalc','bnec','blezc','bgezc','bgec','bgtzc','bltzc','bltc','blezalc','bgezalc',
                'bgeuc','bgtzalc','bltzalc','bltuc','beqzc','jrc','jic','bnezc','jalrc','jialc',
                'maddf','msubf','rint','class','mina','maxa','sel','selnez','seleqz','aluipc']



def count_asm_registers(asm_code):
    registers_values = [0]*len(MIPS_registers)
    for row in asm_code:
        parts = row.replace(',',' ').replace('+',' ').replace('*',' ').replace('[',' ').replace(']',' ') \
                    .replace('-',' ').split()
        for register in MIPS_registers:
            registers_values[MIPS_registers.index(register)] += parts.count(register)
    return registers_values


def count_asm_opcodes(asm_code):
    opcodes_values = [0]*len(MIPS_opcodes)
    for row in asm_code:
        parts = row.split()

        for opcode in MIPS_opcodes:
            if opcode in parts:
                opcodes_values[MIPS_opcodes.index(opcode)] += 1
                break
    return opcodes_values


def get_elf_file_list(ext_drive, packer_id_feature_file, file_id_feature_file, trid_id_feature_file):
    # Load the malware packer id features and file id features from the sample set.
    packer_id_features = pd.read_csv(packer_id_feature_file)
    file_id_features = pd.read_csv(file_id_feature_file)
    trid_id_features = pd.read_csv(trid_id_feature_file)
    
    counter = 0

    file_names_list = file_id_features['file_name']
    file_list = []
    write_list = []
    fid_list = []
    
    for idx, file_name in enumerate(file_names_list):
        trid_name = trid_id_features.iloc[idx, 1]
        fid_name = file_id_features.iloc[idx, 1]
        
        if trid_name.find('ELF') > -1 or fid_name.find('ELF') > -1:
            if fid_name.find('MIPS') > -1:
                print('Found MIPS binary: {:s} - {:s}'.format(trid_name, fid_name))
                counter += 1
                full_name = ext_drive + "VirusShare_" + file_name
                write_list.append(full_name + "\n")
                file_list.append(full_name)
                fid_list.append(fid_name)


        
    fop = open('data/elf-mips-file-list.txt','w')
    fop.writelines(write_list)
    fop.close()
    
    print("Got {:d} ELF MIPS filenames.".format(counter))

    return file_list, fid_list


def extract_asm_features(asm_files, feature_file, api_file):
    # Extract features from test/training asm files, file list is passed in as a parameter.
    
    pid = os.getpid()
    print('Process id:', pid)
    feature_path = 'data/' + feature_file # libc API, symbols, registers, opcodes, etc...   
    print('feature file:', feature_file)

    fapi = open('data/' + api_file)
    defined_apis = fapi.readlines()
    for idx, fname in defined_apis:
        defined_apis[idx] = fname.rstrip() # Remove newlines, they are annoying.

    #asm_files = [i for i in tfiles if '.asm' in i]
    ftot = len(asm_files)
    
    feature_counts = []
    with open(feature_path, 'w') as f:
        # write the csv header
        fw = writer(f)
        colnames = ['file_name'] + MIPS_registers + MIPS_opcodes + defined_apis
        fw.writerow(colnames)
        
        for idx, fname in enumerate(asm_files):
            fasm = open(ext_drive + fname, 'r')
            content = fasm.readlines()
            
            reg_vals = count_asm_registers(content)
            opc_vals = count_asm_opcodes(content)
            api_vals = count_asm_APIs(content, defined_apis)
            #sec_vals = count_asm_sections(content)
            #mis_vals = count_asm_misc(content)
            count_vals = reg_vals + opc_vals + api_vals
            
            feature_counts.append([fname[fname.find('VirusShare_'):]] + count_vals)   
            
            # Writing rows after every 10 files processed
            if (idx+1) % 10 == 0:
                print("{:d} Processed {:d} of {:d} total files.".format(pid, idx + 1, ftot))
                fw.writerows(feature_counts)
                feature_counts = []
                
        # Writing remaining files
        if len(feature_counts) > 0:
            fw.writerows(feature_counts)
            feature_counts = []

    
    feats = pd.read_csv(feature_file)
    # DataFrame.sort() is deprecated, but this is an old version of pandas, does not have sort_values().
    sorted_feats = feats.sort('file_name')
    sorted_feats.to_csv('data/sorted-' + feature_file, index=False)
    
    return





# Start of Script

ext_drive = '/opt/vs/train1asm/'

packer_id_file = 'data/sorted-packer-id-features-vs251.csv'
file_id_file = 'data/sorted-file-id-features-vs251.csv'
trid_id_file = 'data/sorted-trid-id-features-vs251.csv'
    
file_list, fid_list = get_elf_file_list(ext_drive, packer_id_file, file_id_file, trid_id_file)


print("Total MIPS Files: {:d}".format(len(tfiles)))

extract_asm_features(file_list, "elf-mips-asm-features.csv", "elf-libc-api.txt")

# End of Script