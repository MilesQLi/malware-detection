# Generate unique scalar value for each file type to use as a training feature
# for malware sample set. Uses the file types from the magic database used
# by the "file" command. 
#
# Input : files.txt (generated by command: file -l > files.txt)
#         Row Format: [pattern strength, file type, mime type]
#
#         Example: Strength = 320 : BinHex binary text [application/mac-binhex40]
#
# Output: av-file-id-labels.csv
#         row format = [file_type, mime, strength, id]
#
# Author: Derek Chadwick
# Date  : 27/08/2016


import os
import re

# Parse the file type list and convert to csv.
fip = open('data/files.txt', 'r')
in_lines = fip.readlines()
fop = open('data/av-file-id-labels.csv','w')
fop.write('file_type,mime,strength,id\n')
fop.write('unknown,unknown,0,0\n')
p1 = re.compile('Strength = (\d+) : (.+) \[(.*)\]') # Extract the 3 items of interest.
out_lines = []
row = ' '
counter = 0

for idx, line in enumerate(in_lines):
    if line.startswith('Strength'):
        counter += 1
        m = p1.match(line)
        if m != None:
            if m.group(3) == '':
                mime = 'none'
            else:
                mime = m.group(3)
            row = m.group(2).replace(',','') + ',' + mime + ',' + m.group(1) + ',' + str(counter) + '\n'
            out_lines.append(row)
        else:
            continue
    else:
        continue
    
    if (idx % 100) == 0: # print progress
        fop.writelines(out_lines)
        out_lines = []
        print('Filename: {:s} - {:d}'.format(row.rstrip(),idx))
        

if len(out_lines) > 0:
    fop.writelines(out_lines)
    out_lines = []

fip.close()
fop.close()

print('Completed {:d} file IDs.'.format(counter))