# feature_extraction_elf_x86_asm.py
#
# Read a list of ELF x86 ASM files generated by objdump and extract
# feature sets from them.
#
# ELF executable platforms include: x86, amd64, ARM, SPARC, MIPS, Motorola, PowerPC, Renesas (SuperH).
#
# Input: A list of ELF Intel x86 or amd64 ASM files.
#
# Output: sorted-elf-x86-features-asm.csv
#         row format = [file_name, [list of register counts], [list of opcode counts], [list of api functions]]
#
# Author: Derek Chadwick
# Date  : 05/09/2016
#
# TODO: all of the things

from multiprocessing import Pool
import os
from csv import writer
import numpy as np
import pandas as pd
import math
import scipy.misc
import array
import time as tm
import re
import subprocess as sub




# Includes x86 and amd64 registers and opcodes.
x86_registers = ['edx','esi','es','fs','ds','ss','gs','cs','ah','al',
                 'ax','bh','bl','bx','ch','cl','cx','dh','dl','dx',
                 'eax','ebp','ebx','ecx','edi','esp','rax','rbx','rcx','rdx','rsi',
                 'rdi','rbp','rsp','r8','r9','r10','r11','r12','r13','r14','r15']

x86_opcodes = ['mov','movabs','movbe','movsbl','movsbw','movswl','movsbq','movswq','movslq','movsx',
               'movsxd','movzb','movzw','movzx','push','pusha','pop','popa','xchg','in','out','lea',
               'lds','les','lfs','lgs','lss','clc','cld','cli','clts','cmc','lahf','sahf','pushf',
               'popf','stc','std','sti','add','inc','sub','dec','sbb','cmp','test','and','or','xor',
               'clr','adc','neg','not','aaa','aas','daa','das','aad','aam','cbw','cdqe','cwde','cwd',
               'cdq','cqo','cbtw','cltq','cwtl','cwtd','cltd','cqto','mul','imul','div','idiv',
               'rol','ror','rcl','rcr','sal','shl','shr','sar','shld','shrd','call','lcall',
               'jmp','ljmp','ret','lret','retf','enter','leave','jo','jno','jb','jc','jnae','jnb',
               'jnc','jae','je','jz','jne','jnz','jbe','jna','jnbe','ja','js','jns','jp','jpe',
               'jnp','jpo','jl','jnge','jnl','jge','jle','jng','jnle','jg','jcxz','jecxz','jrcxz',
               'loop','loopz','loope','loopnz','loopne','seto','setno','setb','setc','setnae',
               'setnb','setnc','setae','sete','setz','setne','setnz','setbe','setna','setnbe',
               'seta','sets','setns','setp','setpe','setnp','setpo','setl','setnge','setnl',
               'setge','setle','setng','setnle','setg','cmps','scmp','ins','outs','lods',
               'slod','movs','smov','scas','ssca','stos','ssto','xlat','bsf','bsr','bt',
               'btc','btr','bts','int','int3','into','iret','rsm','bound','hlt','nop','arpl',
               'lar','lgdt','lidt','lldt','lmsw','lsl','ltr','sgdt','sidt','sldt','smsw','str',
               'verr','verw','fld','fild','fildll','fldt','fbld','fst','fist','fstp','fistp',
               'fistpll','fstpt','fbstp','fxch','fcom','ficom','fcomp','ficomp','fcompp','fucom',
               'fucomp','fucompp','ftst','fxam','fld1','fldl2t','fldl2e','fldpi','fldlg2','fldln2',
               'fldz','fadd','fiadd','faddp','fsub','fisub','fsubp','fsubr','fisubr','fsubrp',
               'fmul','fimul','fmulp','fdiv','fidiv','fdivp','fdivr','fidivr','fdivrp','f2xm1',
               'fyl2x','fptan','fpatan','fxtract','fprem1','fdecstp','fincstp','fprem','fyl2xp1',
               'fsqrt','fsincos','frndint','fscale','fsin','fcos','fchs','fabs','fninit','finit',
               'fldcw','fnstcw','fstcw','fnstsw','fstsw','fnclex','fclex','fnstenv','fstenv',
               'fldenv','fnsave','fsave','frstor','fneni','feni','fndisi','fdisi','fnsetpm',
               'fsetpm','frstpm','ffree','ffreep','fnop','fwait','addr16','addr32','aword',
               'adword','data16','data32','word','dword','lock','wait','cs','ds','es','fs',
               'gs','ss','rep','repe','repz','repne','repnz','ht','hnt','rex','rexz','rexy',
               'rexyz','rexx','rexxz','rexxy','rexxyz','rex64','rex64z','rex64y','rex64yz',
               'rex64x','rex64xz','rex64xy','rex64xyz','bswap','xadd','cmpxchg','invd','wbinvd',
               'invlpg','cpuid','wrmsr','rdtsc','rdmsr','cmpxchg8b','sysenter','sysexit','fxsave',
               'fxsave64','fxrstor','fxrstor64','rdpmc','ud2','ud2a','ud1','ud2b','cmovo','cmovno',
               'cmovb','cmovc','cmovnae','cmovae','cmovnc','cmovnb','cmove','cmovz','cmovne',
               'cmovnz','cmovbe','cmovna','cmova','cmovnbe','cmovs','cmovns','cmovp','cmovnp',
               'cmovl','cmovnge','cmovge','cmovnl','cmovle','cmovng','cmovg','cmovnle','cmovpe',
               'cmovpo','fcmovb','fcmovnae','fcmove','fcmovbe','fcmovna','fcmovu','fcmovae',
               'fcmovnb','fcmovne','fcmova','fcmovnbe','fcmovnu','fcomi','fucomi','fcomip',
               'fcompi','fucomip','fucompi','movnti','clflush','lfence','mfence','pause','emms',
               'movd','movq','packssdw','packsswb','packuswb','paddb','paddw','paddd','paddq',
               'paddsb','paddsw','paddusb','paddusw','pand','pandn','pcmpeqb','pcmpeqw','pcmpeqd',
               'pcmpgtb','pcmpgtw','pcmpgtd','pmaddwd','pmulhw','pmullw','por','psllw','pslld',
               'psllq','psraw','psrad','psrlw','psrld','psrlq','psubb','psubw','psubd','psubq',
               'psubsb','psubsw','psubusb','psubusw','punpckhbw','punpckhwd','punpckhdq',
               'punpcklbw','punpcklwd','punpckldq','pxor','addps','addss','andnps','andps',
               'cmpeqps','cmpeqss','cmpleps','cmpless','cmpltps','cmpltss','cmpneqps','cmpneqss',
               'cmpnleps','cmpnless','cmpnltps','cmpnltss','cmpordps','cmpordss','cmpunordps',
               'cmpunordss','cmpps','cmpss','comiss','cvtpi2ps','cvtps2pi','cvtsi2ss','cvtss2si',
               'cvttps2pi','cvttss2si','divps','divss','ldmxcsr','maskmovq','maxps','maxss',
               'minps','minss','movaps','movhlps','movhps','movlhps','movlps','movmskps','movntps',
               'movntq','movntdq','movss','movups','mulps','mulss','orps','pavgb','pavgw','pextrw',
               'pinsrw','pmaxsw','pmaxub','pminsw','pminub','pmovmskb','pmulhuw','prefetchnta',
               'prefetcht0','prefetcht1','prefetcht2','psadbw','pshufw','rcpps','rcpss','rsqrtps',
               'rsqrtss','sfence','shufps','sqrtps','sqrtss','stmxcsr','subps','subss','ucomiss',
               'unpckhps','unpcklps','xorps','addpd','addsd','andnpd','andpd','cmpeqpd','cmpeqsd',
               'cmplepd','cmplesd','cmpltpd','cmpltsd','cmpneqpd','cmpneqsd','cmpnlepd','cmpnlesd',
               'cmpnltpd','cmpnltsd','cmpordpd','cmpordsd','cmpunordpd','cmpunordsd','cmppd',
               'cmpsd','comisd','cvtpi2pd','cvtsi2sd','divpd','divsd','maxpd','maxsd','minpd',
               'minsd','movapd','movhpd','movlpd','movmskpd','movntpd','movsd','movupd','mulpd',
               'mulsd','orpd','shufpd','sqrtpd','sqrtsd','subpd','subsd','ucomisd','unpckhpd',
               'unpcklpd','xorpd','cvtdq2pd','cvtpd2dq','cvtdq2ps','cvtpd2pi','cvtpd2ps','cvtps2pd',
               'cvtps2dq','cvtsd2si','cvtsd2ss','cvtss2sd','cvttpd2pi','cvttsd2si','cvttpd2dq',
               'cvttps2dq','maskmovdqu','movdqa','movdqu','movdq2q','movq2dq','pmuludq','pshufd',
               'pshufhw','pshuflw','pslldq','psrldq','punpckhqdq','punpcklqdq','addsubpd','addsubps',
               'cmpxchg16b','fisttp','fisttpll','haddpd','haddps','hsubpd','hsubps','lddqu',
               'monitor','movddup','movshdup','movsldup','mwait','vmcall','vmclear','vmlaunch',
               'vmresume','vmptrld','vmptrst','vmread','vmwrite','vmxoff','vmxon','vmfunc','getsec',
               'invept','invvpid','invpcid','phaddw','phaddd','phaddsw','phsubw','phsubd','phsubsw',
               'pmaddubsw','pmulhrsw','pshufb','psignb','psignw','psignd','palignr','pabsb','pabsw',
               'pabsd','blendpd','blendps','blendvpd','blendvps','dppd','dpps','extractps','insertps',
               'movntdqa','mpsadbw','packusdw','pblendvb','pblendw','pcmpeqq','pextrb','pextrd',
               'pextrq','phminposuw','pinsrb','pinsrd','pinsrq','pmaxsb','pmaxsd','pmaxud','pmaxuw',
               'pminsb','pminsd','pminud','pminuw','pmovsxbw','pmovsxbd','pmovsxbq','pmovsxwd',
               'pmovsxwq','pmovsxdq','pmovzxbw','pmovzxbd','pmovzxbq','pmovzxwd','pmovzxwq',
               'pmovzxdq','pmuldq','pmulld','ptest','roundpd','roundps','roundsd','roundss',
               'pcmpgtq','pcmpestri','pcmpestrm','pcmpistri','pcmpistrm','crc32','xsave',
               'xsave64','xrstor','xrstor64','xgetbv','xsetbv','xsaveopt','xsaveopt64','aesdec',
               'aesdeclast','aesenc','aesenclast','aesimc','aeskeygenassist','pclmulqdq',
               'pclmullqlqdq','pclmulhqlqdq','pclmullqhqdq','pclmulhqhqdq','vaddpd','vaddps',
               'vaddsd','vaddss','vaddsubpd','vaddsubps','vandnpd','vandnps','vandpd','vandps',
               'vblendpd','vblendps','vblendvpd','vblendvps','vbroadcastf128','vbroadcastsd',
               'vbroadcastss','vcmpeq_ospd','vcmpeq_osps','vcmpeq_ossd','vcmpeq_osss','vcmpeqpd',
               'vcmpeqps','vcmpeqsd','vcmpeqss','vcmpeq_uqpd','vcmpeq_uqps','vcmpeq_uqsd',
               'vcmpeq_uqss','vcmpeq_uspd','vcmpeq_usps','vcmpeq_ussd','vcmpeq_usss','vcmpfalse_ospd',
               'vcmpfalse_osps','vcmpfalse_ossd','vcmpfalse_osss','vcmpfalsepd','vcmpfalseps',
               'vcmpfalsesd','vcmpfalsess','vcmpge_oqpd','vcmpge_oqps','vcmpge_oqsd','vcmpge_oqss',
               'vcmpgepd','vcmpgeps','vcmpgesd','vcmpgess','vcmpgt_oqpd','vcmpgt_oqps',
               'vcmpgt_oqsd','vcmpgt_oqss','vcmpgtpd','vcmpgtps','vcmpgtsd','vcmpgtss',
               'vcmple_oqpd','vcmple_oqps','vcmple_oqsd','vcmple_oqss','vcmplepd','vcmpleps',
               'vcmplesd','vcmpless','vcmplt_oqpd','vcmplt_oqps','vcmplt_oqsd','vcmplt_oqss',
               'vcmpltpd','vcmpltps','vcmpltsd','vcmpltss','vcmpneq_oqpd','vcmpneq_oqps',
               'vcmpneq_oqsd','vcmpneq_oqss','vcmpneq_ospd','vcmpneq_osps','vcmpneq_ossd',
               'vcmpneq_osss','vcmpneqpd','vcmpneqps','vcmpneqsd','vcmpneqss','vcmpneq_uspd',
               'vcmpneq_usps','vcmpneq_ussd','vcmpneq_usss','vcmpngepd','vcmpngeps','vcmpngesd',
               'vcmpngess','vcmpnge_uqpd','vcmpnge_uqps','vcmpnge_uqsd','vcmpnge_uqss','vcmpngtpd',
               'vcmpngtps','vcmpngtsd','vcmpngtss','vcmpngt_uqpd','vcmpngt_uqps','vcmpngt_uqsd',
               'vcmpngt_uqss','vcmpnlepd','vcmpnleps','vcmpnlesd','vcmpnless','vcmpnle_uqpd',
               'vcmpnle_uqps','vcmpnle_uqsd','vcmpnle_uqss','vcmpnltpd','vcmpnltps','vcmpnltsd',
               'vcmpnltss','vcmpnlt_uqpd','vcmpnlt_uqps','vcmpnlt_uqsd','vcmpnlt_uqss','vcmpordpd',
               'vcmpordps','vcmpordsd','vcmpord_spd','vcmpord_sps','vcmpordss','vcmpord_ssd',
               'vcmpord_sss','vcmppd','vcmpps','vcmpsd','vcmpss','vcmptruepd','vcmptrueps',
               'vcmptruesd','vcmptruess','vcmptrue_uspd','vcmptrue_usps','vcmptrue_ussd',
               'vcmptrue_usss','vcmpunordpd','vcmpunordps','vcmpunordsd','vcmpunord_spd',
               'vcmpunord_sps','vcmpunordss','vcmpunord_ssd','vcmpunord_sss','vcomisd',
               'vcomiss','vcvtdq2pd','vcvtdq2ps','vcvtpd2dq','vcvtpd2dqx','vcvtpd2dqy','vcvtpd2ps',
               'vcvtpd2psx','vcvtpd2psy','vcvtps2dq','vcvtps2pd','vcvtsd2si','vcvtsd2ss',
               'vcvtsi2sd','vcvtsi2ss','vcvtss2sd','vcvtss2si','vcvttpd2dq','vcvttpd2dqx',
               'vcvttpd2dqy','vcvttps2dq','vcvttsd2si','vcvttss2si','vdivpd','vdivps','vdivsd',
               'vdivss','vdppd','vdpps','vextractf128','vextractps','vhaddpd','vhaddps',
               'vhsubpd','vhsubps','vinsertf128','vinsertps','vlddqu','vldmxcsr','vmaskmovdqu',
               'vmaskmovpd','vmaskmovps','vmaxpd','vmaxps','vmaxsd','vmaxss','vminpd','vminps',
               'vminsd','vminss','vmovapd','vmovaps','vmovd','vmovddup','vmovdqa','vmovdqu',
               'vmovhlps','vmovhpd','vmovhps','vmovlhps','vmovlpd','vmovlps','vmovmskpd','vmovmskps',
               'vmovntdq','vmovntdqa','vmovntpd','vmovntps','vmovq','vmovsd','vmovshdup',
               'vmovsldup','vmovss','vmovupd','vmovups','vmpsadbw','vmulpd','vmulps','vmulsd',
               'vmulss','vorpd','vorps','vpabsb','vpabsd','vpabsw','vpackssdw','vpacksswb',
               'vpackusdw','vpackuswb','vpaddsb','vpaddsw','vpaddb','vpaddd','vpaddq','vpaddw',
               'vpaddusb','vpaddusw','vpalignr','vpand','vpandn','vpavgb','vpavgw','vpblendvb',
               'vpblendw','vpcmpeqb','vpcmpeqd','vpcmpeqq','vpcmpeqw','vpcmpestri','vpcmpestrm',
               'vpcmpgtb','vpcmpgtd','vpcmpgtq','vpcmpgtw','vpcmpistri','vpcmpistrm','vperm2f128',
               'vpermilpd','vpermilps','vpextrb','vpextrd','vpextrq','vpextrw','vphaddd','vphaddsw',
               'vphaddw','vphminposuw','vphsubd','vphsubsw','vphsubw','vpinsrb','vpinsrd','vpinsrq',
               'vpinsrw','vpmaddubsw','vpmaddwd','vpmaxsb','vpmaxsd','vpmaxsw','vpmaxub','vpmaxud',
               'vpmaxuw','vpminsb','vpminsd','vpminsw','vpminub','vpminud','vpminuw','vpmovmskb',
               'vpmovsxbd','vpmovsxbq','vpmovsxbw','vpmovsxdq','vpmovsxwd','vpmovsxwq','vpmovzxbd',
               'vpmovzxbq','vpmovzxbw','vpmovzxdq','vpmovzxwd','vpmovzxwq','vpmuldq','vpmulhrsw',
               'vpmulhuw','vpmulhw','vpmulld','vpmullw','vpmuludq','vpor','vpsadbw','vpshufb',
               'vpshufd','vpshufhw','vpshuflw','vpsignb','vpsignd','vpsignw','vpslld','vpslldq',
               'vpsllq','vpsllw','vpsrad','vpsraw','vpsrld','vpsrldq','vpsrlq','vpsrlw','vpsubb',
               'vpsubd','vpsubq','vpsubsb','vpsubsw','vpsubusb','vpsubusw','vpsubw','vptest',
               'vpunpckhbw','vpunpckhdq','vpunpckhqdq','vpunpckhwd','vpunpcklbw','vpunpckldq',
               'vpunpcklqdq','vpunpcklwd','vpxor','vrcpps','vrcpss','vroundpd','vroundps',
               'vroundsd','vroundss','vrsqrtps','vrsqrtss','vshufpd','vshufps','vsqrtpd','vsqrtps',
               'vsqrtsd','vsqrtss','vstmxcsr','vsubpd','vsubps','vsubsd','vsubss','vtestpd',
               'vtestps','vucomisd','vucomiss','vunpckhpd','vunpckhps','vunpcklpd','vunpcklps',
               'vxorpd','vxorps','vzeroall','vzeroupper','vbroadcasti128','vpblendd','vpbroadcastb',
               'vpbroadcastd','vpbroadcastq','vpbroadcastw','vperm2i128','vpermd','vpermpd',
               'vpermps','vpermq','vextracti128','vinserti128','vpmaskmovd','vpmaskmovq','vpsllvd',
               'vpsllvq','vpsravd','vpsrlvd','vpsrlvq','vgatherdpd','vgatherdps','vgatherqpd',
               'vgatherqps','vpgatherdd','vpgatherdq','vpgatherqd','vpgatherqq','vaesdec','vaesdeclast',
               'vaesenc','vaesenclast','vaesimc','vaeskeygenassist','vpclmulqdq','vpclmullqlqdq',
               'vpclmulhqlqdq','vpclmullqhqdq','vpclmulhqhqdq','rdfsbase','rdgsbase','rdrand',
               'wrfsbase','wrgsbase','vcvtph2ps','vcvtps2ph','vfmadd132pd','vfmadd132ps','vfmadd213pd',
               'vfmadd213ps','vfmadd231pd','vfmadd231ps','vfmadd132sd','vfmadd132ss','vfmadd213sd',
               'vfmadd213ss','vfmadd231sd','vfmadd231ss','vfmaddsub132pd','vfmaddsub132ps',
               'vfmaddsub213pd','vfmaddsub213ps','vfmaddsub231pd','vfmaddsub231ps','vfmsubadd132pd',
               'vfmsubadd132ps','vfmsubadd213pd','vfmsubadd213ps','vfmsubadd231pd','vfmsubadd231ps',
               'vfmsub132pd','vfmsub132ps','vfmsub213pd','vfmsub213ps','vfmsub231pd','vfmsub231ps',
               'vfmsub132sd','vfmsub132ss','vfmsub213sd','vfmsub213ss','vfmsub231sd','vfmsub231ss',
               'vfnmadd132pd','vfnmadd132ps','vfnmadd213pd','vfnmadd213ps','vfnmadd231pd',
               'vfnmadd231ps','vfnmadd132sd','vfnmadd132ss','vfnmadd213sd','vfnmadd213ss',
               'vfnmadd231sd','vfnmadd231ss','vfnmsub132pd','vfnmsub132ps','vfnmsub213pd',
               'vfnmsub213ps','vfnmsub231pd','vfnmsub231ps','vfnmsub132sd','vfnmsub132ss',
               'vfnmsub213sd','vfnmsub213ss','vfnmsub231sd','vfnmsub231ss','xacquire','xrelease',
               'xabort','xbegin','xend','xtest','bzhi','mulx','pdep','pext','rorx','sarx','shlx',
               'shrx','vfmaddpd','vfmaddps','vfmaddsd','vfmaddss','vfmaddsubpd','vfmaddsubps',
               'vfmsubaddpd','vfmsubaddps','vfmsubpd','vfmsubps','vfmsubsd','vfmsubss','vfnmaddpd',
               'vfnmaddps','vfnmaddsd','vfnmaddss','vfnmsubpd','vfnmsubps','vfnmsubsd','vfnmsubss',
               'vfrczpd','vfrczps','vfrczsd','vfrczss','vpcmov','vpcomb','vpcomd','vpcomq',
               'vpcomub','vpcomud','vpcomuq','vpcomuw','vpcomw','vpermil2pd','vpermil2ps',
               'vpcomltb','vpcomltd','vpcomltq','vpcomltub','vpcomltud','vpcomltuq','vpcomltuw',
               'vpcomltw','vpcomleb','vpcomled','vpcomleq','vpcomleub','vpcomleud','vpcomleuq',
               'vpcomleuw','vpcomlew','vpcomgtb','vpcomgtd','vpcomgtq','vpcomgtub','vpcomgtud',
               'vpcomgtuq','vpcomgtuw','vpcomgtw','vpcomgeb','vpcomged','vpcomgeq','vpcomgeub',
               'vpcomgeud','vpcomgeuq','vpcomgeuw','vpcomgew','vpcomeqb','vpcomeqd','vpcomeqq',
               'vpcomequb','vpcomequd','vpcomequq','vpcomequw','vpcomeqw','vpcomneqb','vpcomneqd',
               'vpcomneqq','vpcomnequb','vpcomnequd','vpcomnequq','vpcomnequw','vpcomneqw',
               'vpcomfalseb','vpcomfalsed','vpcomfalseq','vpcomfalseub','vpcomfalseud',
               'vpcomfalseuq','vpcomfalseuw','vpcomfalsew','vpcomtrueb','vpcomtrued','vpcomtrueq',
               'vpcomtrueub','vpcomtrueud','vpcomtrueuq','vpcomtrueuw','vpcomtruew','vphaddbd',
               'vphaddbq','vphaddbw','vphadddq','vphaddubd','vphaddubq','vphaddubw','vphaddudq',
               'vphadduwd','vphadduwq','vphaddwd','vphaddwq','vphsubbw','vphsubdq','vphsubwd',
               'vpmacsdd','vpmacsdqh','vpmacsdql','vpmacssdd','vpmacssdqh','vpmacssdql',
               'vpmacsswd','vpmacssww','vpmacswd','vpmacsww','vpmadcsswd','vpmadcswd','vpperm',
               'vprotb','vprotd','vprotq','vprotw','vpshab','vpshad','vpshaq','vpshaw','vpshlb',
               'vpshld','vpshlq','vpshlw','llwpcb','slwpcb','lwpval','lwpins','andn','bextr','blsi',
               'blsmsk','blsr','tzcnt','blcfill','blci','blcic','blcmsk','blcs','blsfill','blsic',
               't1mskc','tzmsk','prefetch','prefetchw','femms','pavgusb','pf2id','pf2iw','pfacc',
               'pfadd','pfcmpeq','pfcmpge','pfcmpgt','pfmax','pfmin','pfmul','pfnacc','pfpnacc',
               'pfrcp','pfrcpit1','pfrcpit2','pfrsqit1','pfrsqrt','pfsub','pfsubr','pi2fd','pi2fw',
               'pmulhrw','pswapd','syscall','sysret','swapgs','rdtscp','clgi','invlpga','skinit',
               'stgi','vmload','vmmcall','vmrun','vmsave','movntsd','movntss','extrq','insertq', 
               'popcnt','lzcnt','xstore','xcrypt','montmul','xsha1','xsha256','xstorerng',
               'xcryptecb','xcryptcbc','xcryptctr','xcryptcfb','xcryptofb','xstore','adcx','adox',
               'rdseed','clac','stac','bnd','bndmk','bndmov','bndcl','bndcu','bndcn','bndstx',
               'bndldx','sha1rnds4','sha1nexte','sha1msg1','sha1msg2','sha256rnds2','sha256msg1','sha256msg2',
               'kandnw','kandw','korw','kxnorw','kxorw','kmovw','knotw','kortestw','kshiftlw',
               'kshiftrw','kunpckbw','valignd','vpternlogd','valignq','vpternlogq','vblendmpd',
               'vpblendmq','vpermi2pd','vpermi2q','vpermt2pd','vpermt2q','vpmaxsq','vpmaxuq',
               'vpminsq','vpminuq','vprolvq','vprorvq','vpsravq','vblendmps','vpblendmd',
               'vpermi2d','vpermi2ps','vpermt2d','vpermt2ps','vprolvd','vprorvd','vbroadcastf32x4',
               'vbroadcasti32x4','vbroadcastf64x4','vbroadcasti64x4','vcmpeq_oqpd','vcmpfalse_oqpd',
               'vcmpge_ospd','vcmpgt_ospd','vcmple_ospd','vcmplt_ospd','vcmpneq_uqpd','vcmpnge_uspd',
               'vcmpngt_uspd','vcmpnle_uspd','vcmpnlt_uspd','vcmpord_qpd','vcmptrue_uqpd',
               'vcmpunord_qpd','vcmpeq_oqps','vcmpfalse_oqps','vcmpge_osps','vcmpgt_osps',
               'vcmple_osps','vcmplt_osps','vcmpneq_uqps','vcmpnge_usps','vcmpngt_usps',
               'vcmpnle_usps','vcmpnlt_usps','vcmpord_qps','vcmptrue_uqps','vcmpunord_qps',
               'vcmpeq_oqsd','vcmpfalse_oqsd','vcmpge_ossd','vcmpgt_ossd','vcmple_ossd','vcmplt_ossd',
               'vcmpneq_uqsd','vcmpnge_ussd','vcmpngt_ussd','vcmpnle_ussd','vcmpnlt_ussd',
               'vcmpord_qsd','vcmptrue_uqsd','vcmpunord_qsd','vcmpeq_oqss','vcmpfalse_oqss',
               'vcmpge_osss','vcmpgt_osss','vcmple_osss','vcmplt_osss','vcmpneq_uqss',
               'vcmpnge_usss','vcmpngt_usss','vcmpnle_usss','vcmpnlt_usss','vcmpord_qss',
               'vcmptrue_uqss','vcmpunord_qss','vcompresspd','vpcompressq','vpscatterdq',
               'vpscatterqq','vscatterdpd','vscatterqpd','vcompressps','vpcompressd','vpscatterdd',
               'vscatterdps','vcvtudq2pd','vcvtps2udq','vcvtpd2udq','vcvtsd2usi','vcvtusi2sd',
               'vcvtusi2ss','vcvtss2usi','vcvttpd2udq','vcvttps2udq','vcvttsd2usi','vcvttss2usi',
               'vcvtudq2ps','vexpandpd','vpexpandq','vexpandps','vpexpandd','vextractf32x4',
               'vextracti32x4','vextractf64x4','vextracti64x4','vfixupimmpd','vfixupimmps',
               'vfixupimmsd','vgetmantsd','vrndscalesd','vfixupimmss','vgetmantss','vrndscaless',
               'vscalefpd','vscalefps','vscalefsd','vscalefss','vgetexppd','vgetexpps',
               'vgetexpsd','vgetexpss','vgetmantpd','vrndscalepd','vgetmantps','vrndscaleps',
               'vinsertf32x4','vinserti32x4','vinsertf64x4','vinserti64x4','vmovdqa64',
               'vmovdqa32','vmovdqu32','vmovdqu64','vrcp14ps','vrsqrt14ps','vpabsq',
               'vrcp14pd','vrsqrt14pd','vpandd','vpandnd','vpord','vpxord','vpandnq',
               'vpandq','vporq','vpxorq','vpcmpd','vpcmpled','vpcmpltd','vpcmpneqd',
               'vpcmpnled','vpcmpnltd','vpcmpud','vpcmpequd','vpcmpleud','vpcmpltud',
               'vpcmpnequd','vpcmpnleud','vpcmpnltud','vpcmpq','vpcmpleq','vpcmpltq',
               'vpcmpneqq','vpcmpnleq','vpcmpnltq','vpcmpuq','vpcmpequq','vpcmpleuq',
               'vpcmpltuq','vpcmpnequq','vpcmpnleuq','vpcmpnltuq','vptestmq','vpmovdb',
               'vpmovsdb','vpmovusdb','vpmovdw','vpmovsdw','vpmovusdw','vpmovqb','vpmovsqb',
               'vpmovusqb','vpmovqd','vpmovsqd','vpmovusqd','vpmovqw','vpmovsqw','vpmovusqw',
               'vprold','vprord','vprolq','vprorq','vpscatterqd','vscatterqps','vpsraq',
               'vptestmd','vrcp14sd','vrsqrt14sd','vrcp14ss','vrsqrt14ss','vshuff32x4',
               'vshufi32x4','vshuff64x2','vshufi64x2','vptestnmd','vptestnmq','vpbroadcastmb2q',
               'vpbroadcastmw2d','vpconflictd','vpconflictq','vplzcntd','vplzcntq','vexp2pd',
               'vexp2ps','vrcp28pd','vrsqrt28pd','vrcp28ps','vrsqrt28ps','vrcp28sd',
               'vrsqrt28sd','vrcp28ss','vrsqrt28ss','vgatherpf0dpd','vgatherpf0qpd',
               'vgatherpf1dpd','vgatherpf1qpd','vscatterpf0dpd','vscatterpf0qpd',
               'vscatterpf1dpd','vscatterpf1qpd','vgatherpf0dps','vgatherpf0qps',
               'vgatherpf1dps','vgatherpf1qps','vscatterpf0dps','vscatterpf0qps',
               'vscatterpf1dps','vscatterpf1qps','prefetchwt1','clflushopt','xrstors',
               'xrstors64','xsaves','xsaves64','xsavec','xsavec64','encls','enclu',
               'vcvtpd2udqx','vcvtpd2udqy','vcvttpd2udqx','vcvttpd2udqy','kaddd','kandd',
               'kandnd','kmovd','knotd','kord','kortestd','ktestd','kxnord','kxord','kaddq',
               'kandnq','kandq','kmovq','knotq','korq','kortestq','ktestq','kunpckdq',
               'kunpckwd','kxnorq','kxorq','kshiftld','kshiftlq','kshiftrd','kshiftrq',
               'vdbpsadbw','vmovdqu16','vmovdqu8','vpblendmb','vpblendmw','vpermi2w',
               'vpermt2w','vpermw','vpsllvw','vpsravw','vpsrlvw','vpcmpb','vpcmpub',
               'vpcmpuw','vpcmpw','vpmovb2m','vpmovm2b','vpmovm2w','vpmovswb','vpmovuswb',
               'vpmovwb','vpmovw2m','vptestmb','vptestmw','vptestnmb','vptestnmw','kaddb',
               'kandb','kandnb','kmovb','knotb','korb','kortestb','ktestb','kxnorb','kxorb',
               'kaddw','ktestw','kshiftlb','kshiftrb','vbroadcastf32x2','vbroadcastf32x8',
               'vbroadcasti32x2','vbroadcasti32x8','vbroadcastf64x2','vbroadcasti64x2',
               'vcvtpd2qq','vcvtpd2uqq','vcvtps2qq','vcvtps2uqq','vcvtqq2pd','vcvtuqq2pd',
               'vcvtqq2ps','vcvtqq2psx','vcvtqq2psy','vcvttpd2qq','vcvttpd2uqq','vcvttps2qq',
               'vcvttps2uqq','vcvtuqq2ps','vcvtuqq2psx','vcvtuqq2psy','vextractf32x8',
               'vextracti32x8','vinsertf32x8','vinserti32x8','vfpclassss','vextractf64x2',
               'vextracti64x2','vfpclasssd','vinsertf64x2','vinserti64x2','vfpclasspd',
               'vfpclasspdz','vfpclasspdx','vfpclasspdy','vfpclassps','vfpclasspsz','vfpclasspsx',
               'vfpclasspsy','vpmovd2m','vpmovm2d','vpmovm2q','vpmovq2m','vpmullq','vrangepd',
               'vreducepd','vrangeps','vreduceps','vrangesd','vreducesd','vrangess','vreducess',
               'clwb','pcommit','vpmadd52huq','vpmadd52luq','vpmultishiftqb','vpermb','vpermi2b',
               'vpermt2b','clzero','monitorx','mwaitx','rdpkru','wrpkru','rdpid']

# DEPRECATED: use x86 above.
amd64_registers = ['rax','rbx','rcx','rdx','rsi','rdi','rbp','rsp','r8','r9','r10','r11','r12','r13','r14','r15']

amd64_opcodes = ['aaa','aad','aam','aas','adc','add','and','andn','bextr','bextr','blcfill','blci','blcic',
                 'blcmsk','blcs','blsfill','blsi','blsic','blsmsk','blsr','bound','bsf','bsr','bswap','bt',
                 'btc','btr','bts','bzhi','call','cbw','cwde','cdqe','cwd','cdq','cqo','clc','cld','clflush','cmc','cmov',
                 'cmp','cmps','cmpsb','cmpsw','cmpsd','cmpsq','cmpxchg','cmpxchg8b','cmpxchg16b','cpuid',
                 'crc32','daa','das','dec','div','enter','idiv','imul','in','inc','ins','insb','insw','insd',
                 'int','into','jcxz','jecxz','jrcxz','jmp','lahf','lds','les','lfs','lgs','lss','lea','leave','lfence',
                 'llwpcb','lods','lodsb','lodsw','lodsd','lodsq','loop','loope','loopne','loopnz','loopz','lwpins',
                 'lwpval','lzcnt','mfence','mov','movbe','movd','movmskpd','movmskps','movnti','movs','movsb',
                 'movsw','movsd','movsq','movsx','movsxd','movzx','mul','mulx','neg','nop','not','or','out',
                 'outs','outsb','outsw','outsd','pause','pdep','pext','pop','popa','popad','popcnt','popf','popfd',
                 'popfq','prefetch','prefetchw','prefetch','push','pusha','pushad','pushf','pushfd','pushfq',
                 'rcl','rcr','rdfsbase','rdgsbase','rdrand','ret','rol','ror','rorx','sahf','sal','shl','sar','sarx',
                 'sbb','scas','scasb','scasw','scasd','scasq','set','sfence','shl','shld','shlx',
                 'shr','shrd','shrx','slwpcb','stc','std','stos','stosb','stosw','stosd','stosq','sub','t1mskc',
                 'test','tzcnt','tzmsk','wrfsbase','wrgsbase','xadd','xchg','xlat','xlatb','xor','arpl','clgi','cli',
                 'clts','hlt','int','invd','invlpg','invlpga','iret','iretd','iretq','lar','lgdt','lidt','lldt',
                 'lmsw','lsl','ltr','monitor','monitorx','mwait','mwaitx','rdmsr','rdpmc','rdtsc','rdtscp',
                 'rsm','sgdt','sidt','skinit','sldt','smsw','sti','stgi','str','swapgs',
                 'syscall','sysenter','sysexit','sysret','ud2','verr','verw',
                 'vmload','vmmcall','vmrun','vmsave','wbinvd','wrmsr']


SPARC_registers = []

SPARC_opcodes = []


Renesas_registers = []

Renesas_opcodes = []




ELF_sections = ['.bss','.comment','.ctors','.data','.data.rel.ro','.debug_abbrev','.debug_aranges',
                '.debug_frame','.debug_info','.debug_line','.debug_loc','.debug_pubnames',
                '.debug_ranges','.debug_str','.dtors','.dynamic','.dynsym','.dynstr','.eh_frame',
                '.eh_frame_hdr','.fini','.fini_array','.gcc_except_table','.gnu_debuglink','.gnu_extab',
                '.gnu.hash','.gnu.version','.gnu.version_r','.got','.hash','.init','.init_array',
                '.interp','.jcr','.noptrbss','.note.gnu.build-id','.pdr','.plt','.preinit_array',
                '.rel.dyn','.rel.plt','.rodata','.sbss','.sdata','.shstrtab','.strtab','.symtab',
                '.tbss','.tdata','.text']


def count_asm_symbols(asm_code):
    symbols = [0]*7
    for row in asm_code:
        if '*' in row:
            symbols[0] += 1
        if '-' in row:
            symbols[1] += 1
        if '+' in row:
            symbols[2] += 1
        if '[' in row:
            symbols[3] += 1
        if ']' in row:
            symbols[4] += 1
        if '@' in row:
            symbols[5] += 1
        if '?' in row:
            symbols[6] += 1

    return symbols


def count_asm_registers(asm_code):
    registers_values = [0]*len(x86_registers)
    for row in asm_code:
        parts = row.replace(',',' ').replace('+',' ').replace('*',' ').replace('[',' ').replace(']',' ') \
                    .replace('-',' ').split()
        for register in x86_registers:
            registers_values[x86_registers.index(register)] += parts.count(register)
    return registers_values


def count_asm_opcodes(asm_code):
    opcodes_values = [0]*len(x86_opcodes)
    for row in asm_code:
        parts = row.split()

        for opcode in x86_opcodes:
            if opcode in parts:
                opcodes_values[x86_opcodes.index(opcode)] += 1
                break
    return opcodes_values


def count_asm_APIs(asm_code, apis):
    apis_values = [0]*len(apis)
    for row in asm_code:
        for i in range(len(apis)):
            if apis[i] in row:
                apis_values[i] += 1
                break
    return apis_values


def count_asm_misc(asm_code):
    keywords_values = [0]*len(keywords)
    for row in asm_code:
        for i in range(len(keywords)):
            if keywords[i] in row:
                keywords_values[i] += 1
                break
    return keywords_values


def get_elf_file_list(ext_drive, packer_id_feature_file, file_id_feature_file, trid_id_feature_file):
    # Load the malware packer id features and file id features from the sample set.
    packer_id_features = pd.read_csv(packer_id_feature_file)
    file_id_features = pd.read_csv(file_id_feature_file)
    trid_id_features = pd.read_csv(trid_id_feature_file)
    
    counter = 0

    file_names_list = file_id_features['file_name']
    file_list = []
    write_list = []
    fid_list = []
    
    for idx, file_name in enumerate(file_names_list):
        trid_name = trid_id_features.iloc[idx, 1]
        fid_name = file_id_features.iloc[idx, 1]
        
        if trid_name.find('ELF') > -1 or fid_name.find('ELF') > -1:
            if 'x86' in fid_name or 'Intel' in fid_name:
                print('Found: {:s} - {:s}'.format(trid_name, fid_name))
                counter += 1
                full_name = ext_drive + "VirusShare_" + file_name
                write_list.append(full_name + "\n")
                file_list.append(full_name)
                fid_list.append(fid_name)


        
    fop = open('data/elf-x86-file-list.txt','w')
    fop.writelines(write_list)
    fop.close()
    
    print("Got {:d} ELF x86 filenames.".format(counter))

    return file_list, fid_list


def get_column_names(fid_name):
    
    colnames = []
    
    if "Intel" in fid_name:

    elif "x86" in fid_name:

    elif "ARM" in fid_name:
        
    elif "PowerPC" in fid_name:
        
    elif "Motorola" in fid_name:
        
    elif "SPARC" in fid_name:
        
    elif "MIPS" in fid_name:
        
    elif "Renesas" in fid_name: # SuperH
        
        
    return colnames

                


def extract_asm_features(asm_files, feature_file, api_file):
    # Extract features from test/training asm files, file list is passed in as a parameter.
    
    pid = os.getpid()
    print('Process id:', pid)
    feature_path = 'data/' + feature_file # libc API, symbols, registers, opcodes, etc...   
    print('feature file:', feature_file)

    fapi = open('data/' + api_file)
    defined_apis = fapi.readlines()
    for idx, fname in defined_apis:
        defined_apis[idx] = fname.rstrip() # Remove newlines, they are annoying.

    #asm_files = [i for i in tfiles if '.asm' in i]
    ftot = len(asm_files)
    
    feature_counts = []
    with open(feature_path, 'w') as f:
        # write the csv header
        fw = writer(f)
        colnames = ['file_name'] + x86_registers + x86_opcodes + defined_apis
        fw.writerow(colnames)
        
        for idx, fname in enumerate(asm_files):
            fasm = open(ext_drive + fname, 'r')
            content = fasm.readlines()
            
            reg_vals = count_asm_registers(content)
            opc_vals = count_asm_opcodes(content)
            api_vals = count_asm_APIs(content, defined_apis)
            #sec_vals = count_asm_sections(content)
            #mis_vals = count_asm_misc(content)
            count_vals = reg_vals + opc_vals + api_vals
            
            feature_counts.append([fname[fname.find('VirusShare_'):]] + count_vals)   
            
            # Writing rows after every 10 files processed
            if (idx+1) % 10 == 0:
                print("{:d} Processed {:d} of {:d} total files.".format(pid, idx + 1, ftot))
                fw.writerows(feature_counts)
                feature_counts = []
                
        # Writing remaining files
        if len(feature_counts) > 0:
            fw.writerows(feature_counts)
            feature_counts = []

    
    feats = pd.read_csv(feature_file)
    # DataFrame.sort() is deprecated, but this is an old version of pandas, does not have sort_values().
    sorted_feats = feats.sort('file_name')
    sorted_feats.to_csv('data/sorted-' + feature_file, index=False)
    
    return




# Start of Script


# TODO: add command line arguments to specify file names.

#ext_drive = '/opt/vs/train2/'
#packer_id_file = 'data/sorted-packer-id-features-vs252.csv'
#file_id_file = 'data/sorted-file-id-features-vs252.csv'
#trid_id_file = 'data/sorted-trid-id-features-vs252.csv'
    
#unflist, fidlist = get_elf_file_list(ext_drive, packer_id_file, file_id_file, trid_id_file)


ext_drive = '/opt/vs/train1asm/'

packer_id_file = 'data/sorted-packer-id-features-vs251.csv'
file_id_file = 'data/sorted-file-id-features-vs251.csv'
trid_id_file = 'data/sorted-trid-id-features-vs251.csv'
    
file_list, fid_list = get_elf_file_list(ext_drive, packer_id_file, file_id_file, trid_id_file)


print("Total x86 Files: {:d}".format(len(file_list)))

extract_asm_features(file_list, "elf-x86-asm-features.csv", "elf-libc-api.txt")


# End of Script
    
