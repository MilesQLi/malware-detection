# feature_extraction_elf_arm_asm.py
#
# Read a list of ELF ASM and section header files generated by objdump and extract
# feature sets from them.
#
# ELF executable platforms include: x86, amd64, ARM, SPARC, MIPS, Motorola, PowerPC, Renesas (SuperH).
#
# Input: A list of ELF ARM assembler files.
#
# Output: sorted-elf-arm-features-asm.csv
#         row format = [file_name, [list of register counts], [list of opcode counts], [list of api functions]]
#
# Author: Derek Chadwick
# Date  : 24/09/2016
#
# TODO: all of the things

from multiprocessing import Pool
import os
from csv import writer
import numpy as np
import pandas as pd
import math
import scipy.misc
import array
import time as tm
import re
import subprocess as sub



ARM_registers = ['r0','r1','r2','r3','r4','r5','r6','r7','r8','r9','r10','r11','r12','r13','r14','r15','cpsr']

ARM_opcodes = ['mia','miaph','mar','mra','tandc','tbcst','textrc','textrm','tinsr','tmcr','tmcrr',
               'tmia','tmiaph','tmovmsk','tmrc','tmrrc','torc','torvsc','wabs','wacc','wadd',
               'waddbhus','waddsubhx','waligni','walignr','wand','wavg2','wavg4','wcmpeq','wcmpgt',
               'wldr','wmac','wmadd','wmax','wmerge','wmia','wmiaw','wmin','wmul','wmulwsm','wmulwum',
               'wmulwl','wqmia','wqmulm','wqmulwm','wor','wpack','wror','wsad','wshufh','wsll','wsra',
               'wsrl','wstr','wsub','wsubaddhx','wabsdiff','wunpckeh','wunpckel','wunpckih','wunpckil',
               'wxor','adf','muf','suf','rsf','dvf','rdf','pow','rpw','rmf','fml','fdv','frd','pol',
               'mvf','mnf','abs','rnd','sqt','log','lgn','exp','sin','cos','tan','asn','acs','atn',
               'urd','nrm','flt','fix','wfs','rfs','wfc','rfc','cmf','cnf','cmfe','cnfe','stf','ldf',
               'sfm','lfm','vpush','vstmdb','vldmdb','vstmia','vpop','vldmia','vstr','vldr','fstmdbx',
               'fldmdbx','fstmiax','fldmiax','vdup','vmov','vcvt','vmsr','vmrs','vcmp','vabs','vneg',
               'vsqrt','vmla','vmls','vnmls','vnmla','vmul','vnmul','vadd','vsub','vdiv','cfldrs',
               'cfldrd','cfldr32','cfldr64','cfstrs','cfstrd','cfstr32','cfstr64','cfmvsr','cfmvrs',
               'cfmvdlr','cfmvrdl','cfmvdhr','cfmvrdh','cfmv64lr','cfmvr64l','cfmv64hr','cfmvr64h',
               'cfmval32','cfmv32al','cfmvam32','cfmv32am','cfmvah32','cfmv32ah','cfmva32','cfmv32a',
               'cfmva64','cfmv64a','cfmvsc32','cfmv32sc','cfcpys','cfcpyd','cfcvtsd','cfcvtds','cfcvt32s',
               'cfcvt32d','cfcvt64s','cfcvt64d','cfcvts32','cfcvtd32','cftruncs32','cftruncd32','cfrshl32',
               'cfrshl64','cfsh32','cfsh64','cfcmps','cfcmpd','cfcmp32','cfcmp64','cfabss','cfabsd','cfnegs',
               'cfnegd','cfadds','cfaddd','cfsubs','cfsubd','cfmuls','cfmuld','cfabs32','cfabs64',
               'cfneg32','cfneg64','cfadd32','cfadd64','cfsub32','cfsub64','cfmul32','cfmul64','cfmac32',
               'cfmsc32','cfmadd32','cfmsub32','cfmadda32','cfmsuba32','vfma','vfms','vfnma','vfnms',
               'vsel','vmaxnm','vminnm','vrint','mcrr','mrrc','cdp','mrc','mcr','stc','ldc','mrrc2',
               'mcrr2','ldc2','stc2','cdp2','mcr2','mrc2','vmovx','vext','vtbl','vtbx','aese','aesd',
               'aesmc','aesimc','sha1h','sha1su1','sha256su0','vmovl','vcnt','vmvn','vswp','vmovn',
               'vqmovun','vqmovn','vshll','vrecpe','vrsqrte','vrev64','vrev32','vrev16','vcls','vclz',
               'vqabs','vqneg','vtrn','vuzp','vzip','vcgt','vcge','vceq','vcle','vclt','vpaddl',
               'vpadal','sha1c','sha1p','sha1m','sha1su0','sha256h','sha256h2','sha256su1','vand',
               'vbic','vorr','vorn','veor','vbsl','vbit','vbif','vmax','vrecps','vmin','vrsqrts',
               'vpadd','vacge','vpmax','vabd','vacgt','vpmin','vtst','vqdmulh','vqrdmulh','vhadd',
               'vqadd','vrhadd','vhsub','vqsub','vshl','vqshl','vrshl','vqrshl','vaba','vqrdmlah',
               'vqrdmlsh','vshrn','vrshrn','vqshrun','vqrshrun','vqshrn','vqrshrn','vsri','vsli',
               'vqshlu','vshr','vsra','vrshr','vrsra','vmull','vaddhn','vsubhn','vqdmlal','vqdmlsl',
               'vqdmull','vraddhn','vrsubhn','vaddl','vaddw','vsubl','vsubw','vabal','vabdl','vmlal',
               'vmlsl','vld4','vld1','vld2','vld3','bx','mul','mla','swp','stlex','ldaex',
               'stlexd','ldaexd','stlexb','ldaexb','stlexh','ldaexh','stl','lda','stlb','ldab','stlh',
               'ldah','sdiv','udiv','nop','bfc','bfi','mls','strht','ldr','movw','movt','rbit','smc',
               'ldrexb','ldrexd','ldrexh','strexb','strexd','strexh','yield','wfe','wfi','sev','pkhbt',
               'pkhtb','ldrex','qadd16','qadd8','qasx','qsub16','qsub8','qsax','sadd16','sadd8','sasx',
               'shadd16','shadd8','shasx','shsub16','shsub8','shsax','ssub16','ssub8','ssax','uadd16',
               'uadd8','uasx','uhadd16','uhadd8','uhasx','uhsub16','uhsub8','uhsax','uqadd16','uqadd8',
               'uqasx','uqsub16','uqsub8','uqsax','usub16','usub8','usax','rev','rev16','revsh','rfe',
               'sxth','sxtb16','sxtb','uxth','uxtb16','uxtb','sxtah','sxtab16','sxtab','uxtah','uxtab16',
               'uxtab','sel','smuad','smusd','smlad','smlald','smlsd','smlsld','smmul','smmla','smmls',
               'srs','ssat','ssat16','strex','umaal','usad8','usada8','usat','usat16','bxj','bkpt',
               'blx','clz','ldrd','strd','smlabb','smlatb','smlabt','smlatt','smlawb','smlawt',
               'smlalbb','smlaltb','smlalbt','smlaltt','smulbb','smultb','smulbt','smultt','smulwb',
               'smulwt','qadd','qdadd','qsub','qdsub','push','strb','str','strh','and','eor','sub',
               'rsb','add','adc','sbc','rsc','msr','mrs','tst','teq','cmp','cmn','orr','mov','lsl',
               'lsr','asr','rrx','ror','bic','mvn','pop','ldrb','ldrt','stmfd','stm','ldmfd','ldm',
               'svc','ldrh','ldrs','sevl','dcps','clrex','rfedb','rfeia','tbb','tbh','subs','srsdb',
               'srsia','smulw','smul','smull','umull','smlal','umlal','pld','smlaw','sbfx','ubfx',
               'smla','addw','subw','orn','stmia','ldmia','stmdb','ldmdb','bl']
               
               
def count_asm_registers(asm_code):
    registers_values = [0]*len(registers)
    for row in asm_code:
        parts = row.replace(',',' ').replace('+',' ').replace('*',' ').replace('[',' ').replace(']',' ') \
                    .replace('-',' ').split()
        for register in registers:
            registers_values[registers.index(register)] += parts.count(register)
    return registers_values


def count_asm_opcodes(asm_code):
    opcodes_values = [0]*len(opcodes)
    for row in asm_code:
        parts = row.split()

        for opcode in opcodes:
            if opcode in parts:
                opcodes_values[opcodes.index(opcode)] += 1
                break
    return opcodes_values


def get_elf_file_list(ext_drive, packer_id_feature_file, file_id_feature_file, trid_id_feature_file):
    # Load the malware packer id features and file id features from the sample set.
    packer_id_features = pd.read_csv(packer_id_feature_file)
    file_id_features = pd.read_csv(file_id_feature_file)
    trid_id_features = pd.read_csv(trid_id_feature_file)
    
    counter = 0

    file_names_list = file_id_features['file_name']
    file_list = []
    write_list = []
    fid_list = []
    
    for idx, file_name in enumerate(file_names_list):
        trid_name = trid_id_features.iloc[idx, 1]
        fid_name = file_id_features.iloc[idx, 1]
        
        if trid_name.find('ELF') > -1 or fid_name.find('ELF') > -1:
            if fid_name.find('ARM') > -1:
                print('Found ARM binary: {:s} - {:s}'.format(trid_name, fid_name))
                counter += 1
                full_name = ext_drive + "VirusShare_" + file_name
                write_list.append(full_name + "\n")
                file_list.append(full_name)
                fid_list.append(fid_name)


        
    fop = open('data/elf-arm-file-list.txt','w')
    fop.writelines(write_list)
    fop.close()
    
    print("Got {:d} ELF ARM filenames.".format(counter))

    return file_list, fid_list


def extract_asm_features(asm_files, feature_file, api_file):
    # Extract features from test/training asm files, file list is passed in as a parameter.
    
    pid = os.getpid()
    print('Process id:', pid)
    feature_path = 'data/' + feature_file # libc API, symbols, registers, opcodes, etc...   
    print('feature file:', feature_file)

    fapi = open('data/' + api_file)
    defined_apis = fapi.readlines()
    for idx, fname in defined_apis:
        defined_apis[idx] = fname.rstrip() # Remove newlines, they are annoying.

    #asm_files = [i for i in tfiles if '.asm' in i]
    ftot = len(asm_files)
    
    feature_counts = []
    with open(feature_path, 'w') as f:
        # write the csv header
        fw = writer(f)
        colnames = ['file_name'] + ARM_registers + ARM_opcodes + defined_apis
        fw.writerow(colnames)
        
        for idx, fname in enumerate(asm_files):
            fasm = open(ext_drive + fname, 'r')
            content = fasm.readlines()
            
            reg_vals = count_asm_registers(content)
            opc_vals = count_asm_opcodes(content)
            api_vals = count_asm_APIs(content, defined_apis)
            #sec_vals = count_asm_sections(content)
            #mis_vals = count_asm_misc(content)
            count_vals = reg_vals + opc_vals + api_vals
            
            feature_counts.append([fname[fname.find('VirusShare_'):]] + count_vals)   
            
            # Writing rows after every 10 files processed
            if (idx+1) % 10 == 0:
                print("{:d} Processed {:d} of {:d} total files.".format(pid, idx + 1, ftot))
                fw.writerows(feature_counts)
                feature_counts = []
                
        # Writing remaining files
        if len(feature_counts) > 0:
            fw.writerows(feature_counts)
            feature_counts = []

    
    feats = pd.read_csv(feature_file)
    # DataFrame.sort() is deprecated, but this is an old version of pandas, does not have sort_values().
    sorted_feats = feats.sort('file_name')
    sorted_feats.to_csv('data/sorted-' + feature_file, index=False)
    
    return






# Start of Script

ext_drive = '/opt/vs/train1asm/'

packer_id_file = 'data/sorted-packer-id-features-vs251.csv'
file_id_file = 'data/sorted-file-id-features-vs251.csv'
trid_id_file = 'data/sorted-trid-id-features-vs251.csv'
    
file_list, fid_list = get_elf_file_list(ext_drive, packer_id_file, file_id_file, trid_id_file)


print("Total ARM Files: {:d}".format(len(tfiles)))

extract_asm_features(file_list, "elf-arm-asm-features.csv", "elf-libc-api.txt")

# End of Script