# feature_extraction_elf_asm.py
#
# Read a list of ELF ASM and section header files generated by objdump and extract
# feature sets from them.
#
# ELF executables include: x86, amd64, ARM, SPARC, MIPS, Motorola, PowerPC, Renesas (SuperH).
#
# Input:
#
# Output:
#
# Author: Derek Chadwick
# Date  : 05/09/2016
#
# TODO: all of the things

from multiprocessing import Pool
import os
from csv import writer
import numpy as np
import pandas as pd
import math
import scipy.misc
import array
import time as tm
import re
import subprocess as sub


known_sections = [ '.interp',   '.note.gnu.build-id','.hash','.gnu.hash','.dynsym',
    '.dynstr','.gnu.version','.gnu.version_r','.rel.dyn','.rel.plt','.init','.plt',
    '.text','.fini','.rodata','.eh_frame_hdr','.eh_frame','.gcc_except_table','.ctors','.dtors',
    '.jcr','.data.rel.ro','.dynamic','.got','.data','.bss','.comment' ]

x86_registers = ['edx','esi','es','fs','ds','ss','gs','cs','ah','al',
                 'ax','bh','bl','bx','ch','cl','cx','dh','dl','dx',
                 'eax','ebp','ebx','ecx','edi','esp']

x86_opcodes = ['add','al','bt','call','cdq','cld','cli','cmc','cmp','const','cwd','daa','db'
                ,'dd','dec','dw','endp','ends','faddp','fchs','fdiv','fdivp','fdivr','fild'
                ,'fistp','fld','fstcw','fstcwimul','fstp','fword','fxch','imul','in','inc'
                ,'ins','int','jb','je','jg','jge','jl','jmp','jnb','jno','jnz','jo','jz'
                ,'lea','loope','mov','movzx','mul','near','neg','not','or','out','outs'
                ,'pop','popf','proc','push','pushf','rcl','rcr','rdtsc','rep','ret','retn'
                ,'rol','ror','sal','sar','sbb','scas','setb','setle','setnle','setnz'
                ,'setz','shl','shld','shr','sidt','stc','std','sti','stos','sub','test'
                ,'wait','xchg','xor']

amd64_registers = ['rax','rbx','rcx','rdx','rsi','rdi','rbp','rsp','r8','r9','r10','r11','r12','r13','r14','r15']

amd64_opcodes = ['aaa','aad','aam','aas','adc','add','and','andn','bextr','bextr','blcfill','blci','blcic',
                 'blcmsk','blcs','blsfill','blsi','blsic','blsmsk','blsr','bound','bsf','bsr','bswap','bt',
                 'btc','btr','bts','bzhi','call','cbw','cwde','cdqe','cwd','cdq','cqo','clc','cld','clflush','cmc','cmov',
                 'cmp','cmps','cmpsb','cmpsw','cmpsd','cmpsq','cmpxchg','cmpxchg8b','cmpxchg16b','cpuid',
                 'crc32','daa','das','dec','div','enter','idiv','imul','in','inc','ins','insb','insw','insd',
                 'int','into','jcxz','jecxz','jrcxz','jmp','lahf','lds','les','lfs','lgs','lss','lea','leave','lfence',
                 'llwpcb','lods','lodsb','lodsw','lodsd','lodsq','loop','loope','loopne','loopnz','loopz','lwpins',
                 'lwpval','lzcnt','mfence','mov','movbe','movd','movmskpd','movmskps','movnti','movs','movsb',
                 'movsw','movsd','movsq','movsx','movsxd','movzx','mul','mulx','neg','nop','not','or','out',
                 'outs','outsb','outsw','outsd','pause','pdep','pext','pop','popa','popad','popcnt','popf','popfd',
                 'popfq','prefetch','prefetchw','prefetch','push','pusha','pushad','pushf','pushfd','pushfq',
                 'rcl','rcr','rdfsbase','rdgsbase','rdrand','ret','rol','ror','rorx','sahf','sal','shl','sar','sarx',
                 'sbb','scas','scasb','scasw','scasd','scasq','set','sfence','shl','shld','shlx',
                 'shr','shrd','shrx','slwpcb','stc','std','stos','stosb','stosw','stosd','stosq','sub','t1mskc',
                 'test','tzcnt','tzmsk','wrfsbase','wrgsbase','xadd','xchg','xlat','xlatb','xor','arpl','clgi','cli',
                 'clts','hlt','int','invd','invlpg','invlpga','iret','iretd','iretq','lar','lgdt','lidt','lldt',
                 'lmsw','lsl','ltr','monitor','monitorx','mwait','mwaitx','rdmsr','rdpmc','rdtsc','rdtscp',
                 'rsm','sgdt','sidt','skinit','sldt','smsw','sti','stgi','str','swapgs',
                 'syscall','sysenter','sysexit','sysret','ud2','verr','verw',
                 'vmload','vmmcall','vmrun','vmsave','wbinvd','wrmsr']

MIPS_registers = ['$zero','$at','$v0','$v1','$a0','$a1','$a2','$a3','$a4','$a5','$a6','$a7',
                  '$t4','$t5','$t6','$t7','$s0','$s1','$s2','$s3','$s4','$s5','$s6','$s7',
                  '$t8','$t9','$k0','$k1','$gp','$sp','$s8','$fp','$ra',
                  '$0','$1','$2','$3','$4','$5','$6','$7','$8','$9','$10','$11','$12','$13','$14','$15',
                  '$16','$17','$18','$19','$20','$21','$22','$23','$24','$25','$26','$27','$28','$29','$30','$31']

MIPS_opcodes = []

SPARC_registers = []

SPARC_opcodes = []

ARM_registers = ['r0','r1','r2','r3','r4','r5','r6','r7','r8','r9','r10','r11','r12','r13','r14','r15','cpsr']

ARM_opcodes = ['mia','miaph','mar','mra','tandc','tbcst','textrc','textrm','tinsr','tmcr','tmcrr',
               'tmia','tmiaph','tmovmsk','tmrc','tmrrc','torc','torvsc','wabs','wacc','wadd',
               'waddbhus','waddsubhx','waligni','walignr','wand','wavg2','wavg4','wcmpeq','wcmpgt',
               'wldr','wmac','wmadd','wmax','wmerge','wmia','wmiaw','wmin','wmul','wmulwsm','wmulwum',
               'wmulwl','wqmia','wqmulm','wqmulwm','wor','wpack','wror','wsad','wshufh','wsll','wsra',
               'wsrl','wstr','wsub','wsubaddhx','wabsdiff','wunpckeh','wunpckel','wunpckih','wunpckil',
               'wxor','adf','muf','suf','rsf','dvf','rdf','pow','rpw','rmf','fml','fdv','frd','pol',
               'mvf','mnf','abs','rnd','sqt','log','lgn','exp','sin','cos','tan','asn','acs','atn',
               'urd','nrm','flt','fix','wfs','rfs','wfc','rfc','cmf','cnf','cmfe','cnfe','stf','ldf',
               'sfm','lfm','vpush','vstmdb','vldmdb','vstmia','vpop','vldmia','vstr','vldr','fstmdbx',
               'fldmdbx','fstmiax','fldmiax','vdup','vmov','vcvt','vmsr','vmrs','vcmp','vabs','vneg',
               'vsqrt','vmla','vmls','vnmls','vnmla','vmul','vnmul','vadd','vsub','vdiv','cfldrs',
               'cfldrd','cfldr32','cfldr64','cfstrs','cfstrd','cfstr32','cfstr64','cfmvsr','cfmvrs',
               'cfmvdlr','cfmvrdl','cfmvdhr','cfmvrdh','cfmv64lr','cfmvr64l','cfmv64hr','cfmvr64h',
               'cfmval32','cfmv32al','cfmvam32','cfmv32am','cfmvah32','cfmv32ah','cfmva32','cfmv32a',
               'cfmva64','cfmv64a','cfmvsc32','cfmv32sc','cfcpys','cfcpyd','cfcvtsd','cfcvtds','cfcvt32s',
               'cfcvt32d','cfcvt64s','cfcvt64d','cfcvts32','cfcvtd32','cftruncs32','cftruncd32','cfrshl32',
               'cfrshl64','cfsh32','cfsh64','cfcmps','cfcmpd','cfcmp32','cfcmp64','cfabss','cfabsd','cfnegs',
               'cfnegd','cfadds','cfaddd','cfsubs','cfsubd','cfmuls','cfmuld','cfabs32','cfabs64',
               'cfneg32','cfneg64','cfadd32','cfadd64','cfsub32','cfsub64','cfmul32','cfmul64','cfmac32',
               'cfmsc32','cfmadd32','cfmsub32','cfmadda32','cfmsuba32','vfma','vfms','vfnma','vfnms',
               'vsel','vmaxnm','vminnm','vrint','mcrr','mrrc','cdp','mrc','mcr','stc','ldc','mrrc2',
               'mcrr2','ldc2','stc2','cdp2','mcr2','mrc2','vmovx','vext','vtbl','vtbx','aese','aesd',
               'aesmc','aesimc','sha1h','sha1su1','sha256su0','vmovl','vcnt','vmvn','vswp','vmovn',
               'vqmovun','vqmovn','vshll','vrecpe','vrsqrte','vrev64','vrev32','vrev16','vcls','vclz',
               'vqabs','vqneg','vtrn','vuzp','vzip','vcgt','vcge','vceq','vcle','vclt','vpaddl',
               'vpadal','sha1c','sha1p','sha1m','sha1su0','sha256h','sha256h2','sha256su1','vand',
               'vbic','vorr','vorn','veor','vbsl','vbit','vbif','vmax','vrecps','vmin','vrsqrts',
               'vpadd','vacge','vpmax','vabd','vacgt','vpmin','vtst','vqdmulh','vqrdmulh','vhadd',
               'vqadd','vrhadd','vhsub','vqsub','vshl','vqshl','vrshl','vqrshl','vaba','vqrdmlah',
               'vqrdmlsh','vshrn','vrshrn','vqshrun','vqrshrun','vqshrn','vqrshrn','vsri','vsli',
               'vqshlu','vshr','vsra','vrshr','vrsra','vmull','vaddhn','vsubhn','vqdmlal','vqdmlsl',
               'vqdmull','vraddhn','vrsubhn','vaddl','vaddw','vsubl','vsubw','vabal','vabdl','vmlal',
               'vmlsl','vld4','vld1','vld2','vld3','bx','mul','mla','swp','stlex','ldaex',
               'stlexd','ldaexd','stlexb','ldaexb','stlexh','ldaexh','stl','lda','stlb','ldab','stlh',
               'ldah','sdiv','udiv','nop','bfc','bfi','mls','strht','ldr','movw','movt','rbit','smc',
               'ldrexb','ldrexd','ldrexh','strexb','strexd','strexh','yield','wfe','wfi','sev','pkhbt',
               'pkhtb','ldrex','qadd16','qadd8','qasx','qsub16','qsub8','qsax','sadd16','sadd8','sasx',
               'shadd16','shadd8','shasx','shsub16','shsub8','shsax','ssub16','ssub8','ssax','uadd16',
               'uadd8','uasx','uhadd16','uhadd8','uhasx','uhsub16','uhsub8','uhsax','uqadd16','uqadd8',
               'uqasx','uqsub16','uqsub8','uqsax','usub16','usub8','usax','rev','rev16','revsh','rfe',
               'sxth','sxtb16','sxtb','uxth','uxtb16','uxtb','sxtah','sxtab16','sxtab','uxtah','uxtab16',
               'uxtab','sel','smuad','smusd','smlad','smlald','smlsd','smlsld','smmul','smmla','smmls',
               'srs','ssat','ssat16','strex','umaal','usad8','usada8','usat','usat16','bxj','bkpt',
               'blx','clz','ldrd','strd','smlabb','smlatb','smlabt','smlatt','smlawb','smlawt',
               'smlalbb','smlaltb','smlalbt','smlaltt','smulbb','smultb','smulbt','smultt','smulwb',
               'smulwt','qadd','qdadd','qsub','qdsub','push','strb','str','strh','and','eor','sub',
               'rsb','add','adc','sbc','rsc','msr','mrs','tst','teq','cmp','cmn','orr','mov','lsl',
               'lsr','asr','rrx','ror','bic','mvn','pop','ldrb','ldrt','stmfd','stm','ldmfd','ldm',
               'svc','ldrh','ldrs','sevl','dcps','clrex','rfedb','rfeia','tbb','tbh','subs','srsdb',
               'srsia','smulw','smul','smull','umull','smlal','umlal','pld','smlaw','sbfx','ubfx',
               'smla','addw','subw','orn','stmia','ldmia','stmdb','ldmdb','bl']

Motorola_registers = ['d0','d1','d2','d3','d4','d5','d6','d7','a0','a1','a2','a3','a4','a5','a6','a7','usp','ssp']

Motorola_opcodes = ['abcd','addaw','addal','addib','addiw','addil','addqb','addqw','addql','addb',
                    'addw','addl','addxb','addxw','addxl','andib','andiw','andil','andi','andb','andw',
                    'andl','and','aslb','aslw','asll','asrb','asrw','asrl','bhiw','blsw','bccw','bcsw',
                    'bnew','beqw','bvcw','bvsw','bplw','bmiw','bgew','bltw','bgtw','blew','bhil','blsl',
                    'bccl','bcsl','bnel','beql','bvcl','bvsl','bpll','bmil','bgel','bltl','bgtl','blel',
                    'bhis','blss','bccs','bcss','bnes','beqs','bvcs','bvss','bpls','bmis','bges','blts',
                    'bgts','bles','jhi','jls','jcc','jcs','jne','jeq','jvc','jvs','jpl','jmi','jge','jlt',
                    'jgt','jle','bchg','bclr','bfchg','bfclr','bfexts','bfextu','bfffo','bfins','bfset',
                    'bftst','bgnd','bitrev','bkpt','braw','bral','bras','bset','bsrw','bsrl','bsrs','btst',
                    'byterev','callm','cas2w','cas2l','casb','casw','casl','chk2b','chk2w','chk2l','chkl',
                    'chkw','cinva','cinvl','cinvp','cpusha','cpushl','cpushp','clrb','clrw','clrl','cmp2b',
                    'cmp2w','cmp2l','cmpaw','cmpal','cmpib','cmpiw','cmpil','cmpmb','cmpmw','cmpml','cmpb',
                    'cmpw','cmpl','cp0bcbusy','cp1bcbusy','cp0nop','cp1nop','cp0ldb','cp1ldb','cp0ldw',
                    'cp1ldw','cp0ldl','cp1ldl','cp0ld','cp1ld','cp0stb','cp1stb','cp0stw','cp1stw','cp0stl',
                    'cp1stl','cp0st','cp1st','dbcc','dbcs','dbeq','dbf','dbge','dbgt','dbhi','dble',
                    'dbls','dblt','dbmi','dbne','dbpl','dbt','dbvc','dbvs','divsw','divsl','divsll',
                    'divuw','divul','divull','eorib','eoriw','eoril','eori','eorb','eorw','eorl','eor',
                    'exg','extw','extl','extbl','ff1','fabsb','fabsd','fabsl','fabsp','fabss','fabsw',
                    'fabsx','fsabsb','fsabsd','fsabsl','fsabsp','fsabss','fsabsw','fsabsx','fdabsb',
                    'fdabsd','fdabsl','fdabsp','fdabss','fdabsw','fdabsx','facosb','facosd','facosl',
                    'facosp','facoss','facosw','facosx','faddb','faddd','faddl','faddp','fadds','faddw',
                    'faddx','fsaddb','fsaddd','fsaddl','fsaddp','fsadds','fsaddw','fsaddx','fdaddb',
                    'fdaddd','fdaddl','fdaddp','fdadds','fdaddw','fdaddx','fasinb','fasind','fasinl',
                    'fasinp','fasins','fasinw','fasinx','fatanb','fatand','fatanl','fatanp','fatans',
                    'fatanw','fatanx','fatanhb','fatanhd','fatanhl','fatanhp','fatanhs','fatanhw',
                    'fatanhx','fnop','fbeq','fbf','fbge','fbgl','fbgle','fbgt','fble','fblt','fbne',
                    'fbnge','fbngl','fbngle','fbngt','fbnle','fbnlt','fboge','fbogl','fbogt','fbole',
                    'fbolt','fbor','fbseq','fbsf','fbsne','fbst','fbt','fbueq','fbuge','fbugt',
                    'fbule','fbult','fbun','fbeql','fbfl','fbgel','fbgll','fbglel','fbgtl','fblel',
                    'fbltl','fbnel','fbngel','fbngll','fbnglel','fbngtl','fbnlel','fbnltl','fbogel',
                    'fbogll','fbogtl','fbolel','fboltl','fborl','fbseql','fbsfl','fbsnel','fbstl',
                    'fbtl','fbueql','fbugel','fbugtl','fbulel','fbultl','fbunl','fjeq','fjf','fjge',
                    'fjgl','fjgle','fjgt','fjle','fjlt','fjne','fjnge','fjngl','fjngle','fjngt',
                    'fjnle','fjnlt','fjoge','fjogl','fjogt','fjole','fjolt','fjor','fjseq','fjsf',
                    'fjsne','fjst','fjt','fjueq','fjuge','fjugt','fjule','fjult','fjun','fcmpb',
                    'fcmpd','fcmpl','fcmpp','fcmps','fcmpw','fcmpx','fcosb','fcosd','fcosl',
                    'fcosp','fcoss','fcosw','fcosx','fcoshb','fcoshd','fcoshl','fcoshp','fcoshs',
                    'fcoshw','fcoshx','fdbeq','fdbf','fdbge','fdbgl','fdbgle','fdbgt','fdble',
                    'fdblt','fdbne','fdbnge','fdbngl','fdbngle','fdbngt','fdbnle','fdbnlt',
                    'fdboge','fdbogl','fdbogt','fdbole','fdbolt','fdbor','fdbseq','fdbsf','fdbsne',
                    'fdbst','fdbt','fdbueq','fdbuge','fdbugt','fdbule','fdbult','fdbun','fdivb',
                    'fdivd','fdivl','fdivp','fdivs','fdivw','fdivx','fsdivb','fsdivd','fsdivl',
                    'fsdivp','fsdivs','fsdivw','fsdivx','fddivb','fddivd','fddivl','fddivp','fddivs',
                    'fddivw','fddivx','fetoxb','fetoxd','fetoxl','fetoxp','fetoxs','fetoxw',
                    'fetoxx','fetoxm1b','fetoxm1d','fetoxm1l','fetoxm1p','fetoxm1s','fetoxm1w',
                    'fetoxm1x','fgetexpb','fgetexpd','fgetexpl','fgetexpp','fgetexps','fgetexpw',
                    'fgetexpx','fgetmanb','fgetmand','fgetmanl','fgetmanp','fgetmans','fgetmanw',
                    'fgetmanx','fintb','fintd','fintl','fintp','fints','fintw','fintx','fintrzb',
                    'fintrzd','fintrzl','fintrzp','fintrzs','fintrzw','fintrzx','flog10b','flog10d',
                    'flog10l','flog10p','flog10s','flog10w','flog10x','flog2b','flog2d','flog2l',
                    'flog2p','flog2s','flog2w','flog2x','flognb','flognd','flognl','flognp','flogns',
                    'flognw','flognx','flognp1b','flognp1d','flognp1l','flognp1p','flognp1s','flognp1w',
                    'flognp1x','fmodb','fmodd','fmodl','fmodp','fmods','fmodw','fmodx','fmoveb','fmoved',
                    'fmovel','fmovep','fmoves','fmovew','fmovex','fsmoveb','fsmoved','fsmovel','fsmoves',
                    'fsmovew','fsmovex','fsmovep','fdmoveb','fdmoved','fdmovel','fdmoves','fdmovew',
                    'fdmovex','fdmovep','fmovecrx','fmovemd','fmovemx','fmoveml','fmovem','fmulb','fmuld',
                    'fmull','fmulp','fmuls','fmulw','fmulx','fsmulb','fsmuld','fsmull','fsmulp','fsmuls',
                    'fsmulw','fsmulx','fdmulb','fdmuld','fdmull','fdmulp','fdmuls','fdmulw','fdmulx',
                    'fnegb','fnegd','fnegl','fnegp','fnegs','fnegw','fnegx','fsnegb','fsnegd','fsnegl',
                    'fsnegp','fsnegs','fsnegw','fsnegx','fdnegb','fdnegd','fdnegl','fdnegp','fdnegs',
                    'fdnegw','fdnegx','fremb','fremd','freml','fremp','frems','fremw','fremx',
                    'frestore','fsave','fscaleb','fscaled','fscalel','fscalep','fscales','fscalew',
                    'fscalex','fseq','fsf','fsge','fsgl','fsgle','fsgt','fsle','fslt','fsne',
                    'fsnge','fsngl','fsngle','fsngt','fsnle','fsnlt','fsoge','fsogl','fsogt','fsole',
                    'fsolt','fsor','fsseq','fssf','fssne','fsst','fst','fsueq','fsuge','fsugt',
                    'fsule','fsult','fsun','fsgldivb','fsgldivd','fsgldivl','fsgldivp','fsgldivs',
                    'fsgldivw','fsgldivx','fsglmulb','fsglmuld','fsglmull','fsglmulp','fsglmuls',
                    'fsglmulw','fsglmulx','fsinb','fsind','fsinl','fsinp','fsins','fsinw','fsinx',
                    'fsincosb','fsincosd','fsincosl','fsincosp','fsincoss','fsincosw','fsincosx',
                    'fsinhb','fsinhd','fsinhl','fsinhp','fsinhs','fsinhw','fsinhx','fsqrtb',
                    'fsqrtd','fsqrtl','fsqrtp','fsqrts','fsqrtw','fsqrtx','fssqrtb','fssqrtd',
                    'fssqrtl','fssqrtp','fssqrts','fssqrtw','fssqrtx','fdsqrtb','fdsqrtd',
                    'fdsqrtl','fdsqrtp','fdsqrts','fdsqrtw','fdsqrtx','fsubb','fsubd','fsubl',
                    'fsubp','fsubs','fsubw','fsubx','fssubb','fssubd','fssubl','fssubp','fssubs',
                    'fssubw','fssubx','fdsubb','fdsubd','fdsubl','fdsubp','fdsubs','fdsubw',
                    'fdsubx','ftanb','ftand','ftanl','ftanp','ftans','ftanw','ftanx','ftanhb',
                    'ftanhd','ftanhl','ftanhp','ftanhs','ftanhw','ftanhx','ftentoxb','ftentoxd',
                    'ftentoxl','ftentoxp','ftentoxs','ftentoxw','ftentoxx','ftrapeq','ftrapf',
                    'ftrapge','ftrapgl','ftrapgle','ftrapgt','ftraple','ftraplt','ftrapne','ftrapnge',
                    'ftrapngl','ftrapngle','ftrapngt','ftrapnle','ftrapnlt','ftrapoge','ftrapogl',
                    'ftrapogt','ftrapole','ftrapolt','ftrapor','ftrapseq','ftrapsf','ftrapsne',
                    'ftrapst','ftrapt','ftrapueq','ftrapuge','ftrapugt','ftrapule','ftrapult',
                    'ftrapun','ftrapeqw','ftrapfw','ftrapgew','ftrapglw','ftrapglew','ftrapgtw',
                    'ftraplew','ftrapltw','ftrapnew','ftrapngew','ftrapnglw','ftrapnglew',
                    'ftrapngtw','ftrapnlew','ftrapnltw','ftrapogew','ftrapoglw','ftrapogtw',
                    'ftrapolew','ftrapoltw','ftraporw','ftrapseqw','ftrapsfw','ftrapsnew',
                    'ftrapstw','ftraptw','ftrapueqw','ftrapugew','ftrapugtw','ftrapulew',
                    'ftrapultw','ftrapunw','ftrapeql','ftrapfl','ftrapgel','ftrapgll','ftrapglel',
                    'ftrapgtl','ftraplel','ftrapltl','ftrapnel','ftrapngel','ftrapngll','ftrapnglel',
                    'ftrapngtl','ftrapnlel','ftrapnltl','ftrapogel','ftrapogll','ftrapogtl',
                    'ftrapolel','ftrapoltl','ftraporl','ftrapseql','ftrapsfl','ftrapsnel',
                    'ftrapstl','ftraptl','ftrapueql','ftrapugel','ftrapugtl','ftrapulel','ftrapultl',
                    'ftrapunl','ftstb','ftstd','ftstl','ftstp','ftsts','ftstw','ftstx','ftwotoxb',
                    'ftwotoxd','ftwotoxl','ftwotoxp','ftwotoxs','ftwotoxw','ftwotoxx',
                    'halt','illegal','intouch','jmp','jra','jsr','jbsr','lea','lpstop','linkw',
                    'linkl','link','lslb','lslw','lsll','lsrb','lsrw','lsrl','macw','macl','moveal',
                    'moveaw','movclrl','movec','movemw','moveml','movepw','movepl','moveq','moveb',
                    'movew','movel','move','mov3ql','mvsb','mvsw','mvzb','mvzw','movesb','movesw',
                    'movesl','move16','msacw','msacl','mulsw','mulsl','muluw','mulul','nbcd','negb',
                    'negw','negl','negxb','negxw','negxl','nop','notb','notw','notl','orib','oriw',
                    'oril','ori','orb','orw','orl','or','pack','pbac','pbacw','pbas','pbasw','pbbc',
                    'pbbcw','pbbs','pbbsw','pbcc','pbccw','pbcs','pbcsw','pbgc','pbgcw','pbgs','pbgsw',
                    'pbic','pbicw','pbis','pbisw','pblc','pblcw','pbls','pblsw','pbsc','pbscw','pbss',
                    'pbssw','pbwc','pbwcw','pbws','pbwsw','pdbac','pdbas','pdbbc','pdbbs','pdbcc',
                    'pdbcs','pdbgc','pdbgs','pdbic','pdbis','pdblc','pdbls','pdbsc','pdbss','pdbwc',
                    'pdbws','pea','pflusha','pflush','pflushan','pflushn','pflushr','pflushs','ploadr',
                    'ploadw','plpar','plpaw','pmove','pmovefd','prestore','psave','psac','psas','psbc',
                    'psbs','pscc','pscs','psgc','psgs','psic','psis','pslc','psls','pssc','psss','pswc',
                    'psws','ptestr','ptestw','ptrapacw','ptrapacl','ptrapac','ptrapasw','ptrapasl',
                    'ptrapas','ptrapbcw','ptrapbcl','ptrapbc','ptrapbsw','ptrapbsl','ptrapbs','ptrapccw',
                    'ptrapccl','ptrapcc','ptrapcsw','ptrapcsl','ptrapcs','ptrapgcw','ptrapgcl',
                    'ptrapgc','ptrapgsw','ptrapgsl','ptrapgs','ptrapicw','ptrapicl','ptrapic',
                    'ptrapisw','ptrapisl','ptrapis','ptraplcw','ptraplcl','ptraplc','ptraplsw',
                    'ptraplsl','ptrapls','ptrapscw','ptrapscl','ptrapsc','ptrapssw','ptrapssl',
                    'ptrapss','ptrapwcw','ptrapwcl','ptrapwc','ptrapwsw','ptrapwsl','ptrapws',
                    'pulse','pvalid','remsl','remul','reset','rolb','rolw','roll','rorb','rorw',
                    'rorl','roxlb','roxlw','roxll','roxrb','roxrw','roxrl','rtd','rte','rtm','rtr',
                    'rts','satsl','sbcd','stldsr','trapcc','trapcs','trapeq','tpf','trapf','trapge',
                    'trapgt','traphi','traple','trapls','traplt','trapmi','trapne','trappl','trapt',
                    'trapvc','trapvs','trapccw','trapcsw','trapeqw','tpfw','trapfw','trapgew','trapgtw',
                    'traphiw','traplew','traplsw','trapltw','trapmiw','trapnew','trapplw','traptw',
                    'trapvcw','trapvsw','trapccl','trapcsl','trapeql','tpfl','trapfl','trapgel','trapgtl',
                    'traphil','traplel','traplsl','trapltl','trapmil','trapnel','trappll','traptl',
                    'trapvcl','trapvsl','trapv','scc','scs','seq','sf','sge','sgt','shi','sle','sls',
                    'slt','smi','sne','spl','st','svc','svs','sleep','stop','strldsr','subal','subaw',
                    'subib','subiw','subil','subqb','subqw','subql','subb','subw','subl','subxb','subxw',
                    'subxl','swap','swbeg','swbegl','tas','trap','trapx','tstb','tstw','tstl','unlk','unpk',
                    'wddatab','wddataw','wddatal','wdebugl','wdebug']

PowerPC_registers = ['r0','r1','r2','r3','r4','r5','r6','r7','r8','r9','r10','r11','r12','r13','r14','r15',
                    'r16','r17','r18','r19','r20','r21','r22','r23','r24','r25','r26','r27','r28','r29','r30','r31']

PowerPC_opcodes = ['add','addc','adde','addi','addic','addic.','addis','addme','addze','and','andc','andi.','andis.',
                   'b','bc','bcctr','bclr','cmp','cmpi','cmpl','cmpli','cntlzd','cntlzw','crand','crandc','creqv',
                   'crnand','crnor','cror','crorc','crxor','dcbf','dcbst','dcbt','dcbtst','dcbz','divd','divdu',
                   'divw','divwu','eciwx','ecowx','eieio','eqv','extsb','extsh','extsw','fabs','fadd','fadds',
                   'fcfid','fcmpo','fcmpu','fctid','fctidz','fctiw','fctiwz','fdiv','fdivs','fmadd','fmadds',
                   'fmr','fmsub','fmsubs','fmul','fmuls','fnabs','fneg','fnmadd','fnmadds','fnmsub','fnmsubs',
                   'fre','fres','frsp','frsqrte','frsqrtes','fsel','fsqrt','fsqrts','fsub','fsubs','hrfid','icbi',
                   'isync','lbz','lbzu','lbzux','lbzx','ld','ldarx','ldu','ldux','ldx','lfd','lfdu','lfdux','lfdx',
                   'lfs','lfsu','lfsux','lfsx','lha','lhau','lhaux','lhax','lhbrx','lhz','lhzu','lhzux','lhzx','lmw',
                   'lswi','lswx','lwa','lwarx','lwaux','lwax','lwbrx','lwz','lwzu','lwzux','lwzx','mcrf','mcrfs',
                   'mcrxr','mfcr','mfocrf','mffs','mfmsr','mfspr','mfsr','mfsrin','mftb','mtcrf','mtocrf','mtfsb0',
                   'mtfsb1','mtfsf','mtfsfi','mtmsr','mtmsrd','mtspr','mtsr','mtsrin','mulhd','mulhdu','mulhw','mulhwu',
                   'mulld','mulli','mullw','nand','neg','nor','or','orc','ori','oris','popcntb','rfid','rldcl','rldcr',
                   'rldic','rldicl','rldicr','rldimi','rlwimi','rlwinm','rlwnm','sc','slbia','slbie','slbmfee',
                   'slbmfev','slbmte','sld','slw','srad','sradi','sraw','srawi','srd','srw','stb','stbu','stbux',
                   'stbx','std','stdcx.','stdu','stdux','stdx','stfd','stfdu','stfdux','stfdx','stfiwx','stfs',
                   'stfsu','stfsux','stfsx','sth','sthbrx','sthu','sthux','sthx','stmw','stswi','stswx','stw',
                   'stwbrx','stwcx.','stwu','stwux','stwx','subf','subfc','subfe','subfic','subfme','subfze',
                   'sync','td','tdi','tlbia','tlbie','tlbsync','tw','twi','xor','xori','xoris']




def count_asm_symbols(asm_code):
    symbols = [0]*7
    for row in asm_code:
        if '*' in row:
            symbols[0] += 1
        if '-' in row:
            symbols[1] += 1
        if '+' in row:
            symbols[2] += 1
        if '[' in row:
            symbols[3] += 1
        if ']' in row:
            symbols[4] += 1
        if '@' in row:
            symbols[5] += 1
        if '?' in row:
            symbols[6] += 1

    return symbols


def count_asm_registers(asm_code):
    registers_values = [0]*len(registers)
    for row in asm_code:
        parts = row.replace(',',' ').replace('+',' ').replace('*',' ').replace('[',' ').replace(']',' ') \
                    .replace('-',' ').split()
        for register in registers:
            registers_values[registers.index(register)] += parts.count(register)
    return registers_values


def count_asm_opcodes(asm_code):
    opcodes_values = [0]*len(opcodes)
    for row in asm_code:
        parts = row.split()

        for opcode in opcodes:
            if opcode in parts:
                opcodes_values[opcodes.index(opcode)] += 1
                break
    return opcodes_values


def count_asm_APIs(asm_code, apis):
    apis_values = [0]*len(apis)
    for row in asm_code:
        for i in range(len(apis)):
            if apis[i] in row:
                apis_values[i] += 1
                break
    return apis_values


def count_asm_misc(asm_code):
    keywords_values = [0]*len(keywords)
    for row in asm_code:
        for i in range(len(keywords)):
            if keywords[i] in row:
                keywords_values[i] += 1
                break
    return keywords_values


# Extract features from test/training asm files, file list is passed in as a parameter

def extract_asm_features(tfiles, feature_file, api_file):
    
    pid = os.getpid()
    print('Process id:', pid)
    feature_file = 'data/' + str(pid) + feature_file # libc API, symbols, registers, opcodes, etc...   
    print('feature file:', feature_file)

    fapi = open("data/elf-libc-api.txt")
    defined_apis = fapi.readlines()
    for idx, fname in defined_apis:
        defined_apis[idx] = fname.rstrip() # Remove newlines, they are annoying.

    asm_files = [i for i in tfiles if '.asm' in i]
    ftot = len(asm_files)
    
    feature_counts = []
    with open(feature_file, 'w') as f:
        # write the csv header
        fw = writer(f)
        colnames = ['file_name'] + registers + opcodes + defined_apis + keywords
        fw.writerow(colnames)
        
        for idx, fname in enumerate(asm_files):
            fasm = open(ext_drive + fname, 'r')
            content = fasm.readlines()
            
            reg_vals = count_asm_registers(content)
            opc_vals = count_asm_opcodes(content)
            api_vals = count_asm_APIs(content, defined_apis)
            sec_vals = count_asm_sections(content)
            mis_vals = count_asm_misc(content)
            count_vals = reg_vals + opc_vals + api_vals + mis_vals + sec_vals
            
            feature_counts.append([fname[:fname.find('.asm')]] + count_vals)   
            
            # Writing rows after every 10 files processed
            if (idx+1) % 10 == 0:
                print("{:d} Processed {:d} of {:d} total files.".format(pid, idx + 1, ftot))
                fw.writerows(feature_counts)
                feature_counts = []
                
        # Writing remaining files
        if len(feature_counts) > 0:
            fw.writerows(feature_counts)
            feature_counts = []

    return


def sort_and_save_asm_feature_file():
    entropys = pd.read_csv('data/elf-asm-features.csv')
    # DataFrame.sort() is deprecated, but this is an old version of pandas, does not have sort_values().
    sorted_entropys = entropys.sort('file_name')
    sorted_entropys.to_csv('data/sorted-elf-asm-features.csv', index=False)
    sorted_entropys.head(20)
    
    return


def combine_asm_files():
    # Function to combine the newly generated asm feature files into one file:
    # 1. list data directory
    # 2. For each file in file list that matches (\d\d\d\d-asm-features.csv)
    # 3. Trim the filenames if necessary (should remove VirusShare_  prefix).
    # 4. Concatenate the unsorted asm feature files.
    # 5. Sort and write to data/sorted-asm-features.csv
    fop = open('data/elf-asm-features.csv','w')
    #fop.write('file_name,entropy,file_size\n')
    p1 = re.compile('\d{3,5}-elf-asm-features.csv') # This is the PID prefix for each file.
    file_list = os.listdir('data/')
    counter = 0
    for file_name in file_list:
        if p1.match(file_name):
            fip = open('data/' + file_name, 'r')
            in_lines = fip.readlines()
            fop.writelines(in_lines)
            counter += len(in_lines)
            fip.close()
            
    print('Completed combine of {:d} asm features.'.format(counter))  
    
    fop.close()
    
    sort_and_save_asm_feature_file()
    
    return

# Start of Script

# Divide the train files into four groups for multiprocessing.

# TODO: add command line arguments to specify file names.

ext_drive = '/opt/vs/train1/'
tfiles = os.listdir(ext_drive)
print("Total Files: {:d}".format(len(tfiles)))

extract_asm_features(tfiles)

#quart = len(tfiles)/4
#train1 = tfiles[:quart]
#train2 = tfiles[quart:(2*quart)]
#train3 = tfiles[(2*quart):(3*quart)]
#train4 = tfiles[(3*quart):]
#print("Files: {:d} - {:d} - {:d}".format(len(tfiles), quart, (len(train1)+len(train2)+len(train3)+len(train4))))
#trains = [train1, train2, train3, train4]

#p = Pool(4)
#p.map(extract_asm_features, trains)

#combine_asm_files()


# End of Script
    
